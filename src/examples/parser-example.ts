import { ParserService } from '../services/parser-service';
import { Database } from '../database/database';
import { createParserConfig } from '../config/parser-config';
import { SearchCriteria } from '../types/parser';

async function parserExample(): Promise<void> {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä—Å–µ—Ä–æ–º peek.tg...\n');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const database = new Database({ path: './data/example.db' });
  
  try {
    await database.initialize();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n');

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
    const parserConfig = createParserConfig();
    const parserService = new ParserService(parserConfig, database);

    await parserService.initialize();
    console.log('‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n');

    // –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
    console.log('üìã –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ–¥–∞—Ä–∫–æ–≤');
    const simpleCriteria: SearchCriteria = {
      gift_name: 'Spring Basket'
    };

    try {
      const simpleResult = await parserService.searchGifts(simpleCriteria);
      console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${simpleResult.count} –ø–æ–¥–∞—Ä–∫–æ–≤`);
      console.log(`  üìÖ –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${simpleResult.timestamp.toLocaleString()}`);
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error}`);
    }

    // –ü—Ä–∏–º–µ—Ä 2: –ü–æ–∏—Å–∫ —Å –ø–æ–ª–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä 2: –ü–æ–∏—Å–∫ —Å –ø–æ–ª–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏');
    const fullCriteria: SearchCriteria = {
      gift_name: 'Spring Basket',
      model: 'Ritual Goat',
      background: 'Black',
      pattern: 'All patterns'
    };

    try {
      const fullResult = await parserService.searchGifts(fullCriteria);
      console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${fullResult.count} –ø–æ–¥–∞—Ä–∫–æ–≤`);
      console.log(`  üéÅ –ö—Ä–∏—Ç–µ—Ä–∏–∏: ${JSON.stringify(fullResult.searchCriteria, null, 2)}`);
      
      if (fullResult.items.length > 0) {
        console.log(`  üì¶ –ü–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫: ${fullResult.items[0].name}`);
      }
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error}`);
    }

    // –ü—Ä–∏–º–µ—Ä 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ –∏ –ø–æ–∏—Å–∫ –¥–ª—è –Ω–µ–≥–æ
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ –∏ –ø–æ–∏—Å–∫');
    try {
      const preset = await database.presets.create({
        user_id: 123,
        gift_name: 'Summer Gift',
        model: 'Magic Cat',
        background: 'White',
        pattern: 'Stars',
        is_active: true
      });

      console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–µ—Å–µ—Ç: ${preset.gift_name} (ID: ${preset.id})`);

      const presetResult = await parserService.searchGiftsForPreset(preset);
      console.log(`  üîç –ù–∞–π–¥–µ–Ω–æ ${presetResult.count} –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –ø—Ä–µ—Å–µ—Ç–∞`);
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ—Å–µ—Ç–æ–º: ${error}`);
    }

    // –ü—Ä–∏–º–µ—Ä 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    try {
      const activePresets = await database.presets.getAllActive();
      console.log(`  üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤: ${activePresets.length}`);

      if (activePresets.length > 0) {
        const preset = activePresets[0];
        console.log(`  üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è: ${preset.gift_name}`);

        const changeResult = await parserService.checkPresetChanges(preset);
        console.log(`  üìà –ò–∑–º–µ–Ω–µ–Ω–∏—è: ${changeResult.hasChanged ? '–¥–∞' : '–Ω–µ—Ç'}`);
        console.log(`  üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${changeResult.oldCount} ‚Üí ${changeResult.newCount}`);
      }
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${error}`);
    }

    // –ü—Ä–∏–º–µ—Ä 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞');
    const stats = parserService.getStats();
    console.log(`  üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.totalRequests}`);
    console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.successfulRequests}`);
    console.log(`  ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${stats.failedRequests}`);
    console.log(`  ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${stats.averageResponseTime.toFixed(2)}ms`);

    console.log('\nüéâ –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä—Å–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await database.close();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  parserExample().catch(console.error);
}

export { parserExample };
