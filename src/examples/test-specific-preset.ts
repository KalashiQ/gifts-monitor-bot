import { ParserService } from '../services/parser-service';
import { Database } from '../database/database';
import { createParserConfig } from '../config/parser-config';
import { SearchCriteria } from '../types/parser';

async function testSpecificPreset(): Promise<void> {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞...\n');
  console.log('üìã –ü—Ä–µ—Å–µ—Ç:');
  console.log('  üéÅ –ü–æ–¥–∞—Ä–æ–∫: Spring Basket');
  console.log('  üêê –ú–æ–¥–µ–ª—å: Ritual Goat');
  console.log('  ‚ö´ –§–æ–Ω: Black');
  console.log('  üé® –£–∑–æ—Ä: –Ω–µ —É–∫–∞–∑–∞–Ω\n');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const database = new Database({ path: './data/test-preset.db' });
  
  try {
    await database.initialize();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n');

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
    const parserConfig = createParserConfig();
    const parserService = new ParserService(parserConfig, database);

    await parserService.initialize();
    console.log('‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n');

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞...');
    const preset = await database.presets.create({
      user_id: 999,
      gift_name: 'Spring Basket',
      model: 'Ritual Goat',
      background: 'Black',
      pattern: undefined, // –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º —É–∑–æ—Ä
      is_active: true
    });
    console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–µ—Å–µ—Ç ID: ${preset.id}\n`);

    // –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ —Å –ø–æ–ª–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
    console.log('üîç –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ —Å –ø–æ–ª–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏');
    const fullCriteria: SearchCriteria = {
      gift_name: 'Spring Basket',
      model: 'Ritual Goat',
      background: 'Black'
    };

    let firstResult: any = null;
    try {
      const startTime = Date.now();
      firstResult = await parserService.searchGifts(fullCriteria);
      const searchTime = Date.now() - startTime;

      console.log(`  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:`);
      console.log(`    üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: ${firstResult.count}`);
      console.log(`    ‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${searchTime}ms`);
      console.log(`    üìÖ –í—Ä–µ–º—è: ${firstResult.timestamp.toLocaleString()}`);
      
      if (firstResult.items.length > 0) {
        console.log(`    üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:`);
        firstResult.items.slice(0, 3).forEach((item: any, index: number) => {
          console.log(`      ${index + 1}. ${item.name} (ID: ${item.id})`);
          if (item.rarity) {
            console.log(`         –†–µ–¥–∫–æ—Å—Ç—å: ${item.rarity}`);
          }
        });
        if (firstResult.items.length > 3) {
          console.log(`      ... –∏ –µ—â–µ ${firstResult.items.length - 3} –ø–æ–¥–∞—Ä–∫–æ–≤`);
        }
      }
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error}`);
    }

    console.log('\n');

    // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø—Ä–µ—Å–µ—Ç
    console.log('üîç –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø—Ä–µ—Å–µ—Ç');
    try {
      const startTime = Date.now();
      const presetResult = await parserService.searchGiftsForPreset(preset);
      const searchTime = Date.now() - startTime;

      console.log(`  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–µ—Å–µ—Ç:`);
      console.log(`    üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: ${presetResult.count}`);
      console.log(`    ‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${searchTime}ms`);
      console.log(`    üéØ –ö—Ä–∏—Ç–µ—Ä–∏–∏: ${JSON.stringify(presetResult.searchCriteria, null, 4)}`);
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–µ—Å–µ—Ç: ${error}`);
    }

    console.log('\n');

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    console.log('üîÑ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    try {
      const changeResult = await parserService.checkPresetChanges(preset);
      
      console.log(`  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:`);
      console.log(`    üìà –ò–∑–º–µ–Ω–µ–Ω–∏—è: ${changeResult.hasChanged ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`    üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${changeResult.oldCount} ‚Üí ${changeResult.newCount}`);
      
      if (changeResult.hasChanged) {
        const diff = changeResult.newCount - changeResult.oldCount;
        console.log(`    üéâ –†–∞–∑–Ω–∏—Ü–∞: ${diff > 0 ? '+' : ''}${diff} –ø–æ–¥–∞—Ä–∫–æ–≤`);
      }
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${error}`);
    }

    console.log('\n');

    // –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
    console.log('üìä –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞');
    const stats = parserService.getStats();
    console.log(`  üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`    üî¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.totalRequests}`);
    console.log(`    ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.successfulRequests}`);
    console.log(`    ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${stats.failedRequests}`);
    console.log(`    ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${stats.averageResponseTime.toFixed(2)}ms`);
    
    if (stats.lastRequestTime) {
      console.log(`    üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: ${stats.lastRequestTime.toLocaleString()}`);
    }

    console.log('\n');

    // –¢–µ—Å—Ç 5: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    console.log('üîÑ –¢–µ—Å—Ç 5: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏');
    try {
      const startTime = Date.now();
      const repeatResult = await parserService.searchGifts(fullCriteria);
      const searchTime = Date.now() - startTime;

      console.log(`  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:`);
      console.log(`    üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: ${repeatResult.count}`);
      console.log(`    ‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${searchTime}ms`);
      
      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–µ—Ä–≤—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
      const firstCount = firstResult?.count || 0;
      const secondCount = repeatResult.count;
      const isConsistent = firstCount === secondCount;
      
      console.log(`    üîÑ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: ${isConsistent ? '–î–ê' : '–ù–ï–¢'}`);
      if (!isConsistent) {
        console.log(`    ‚ö†Ô∏è –†–∞–∑–Ω–∏—Ü–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö: ${firstCount} vs ${secondCount}`);
      }
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: ${error}`);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await database.close();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testSpecificPreset().catch(console.error);
}

export { testSpecificPreset };
