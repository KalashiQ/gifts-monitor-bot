import dotenv from 'dotenv';
import { DatabaseConnection } from '../database/connection';
import { Database } from '../database/database';
import { PresetModel } from '../database/models/preset.model';
import { ParserService } from '../services/parser-service';
import { TelegramBotService } from '../bot/telegram-bot';
import { createParserConfig } from '../config/parser-config';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function runBotExample() {
  try {
    console.log('ü§ñ Bot Example - Starting...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const db = new DatabaseConnection({
      path: './data/example.db'
    });

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const database = new Database({ path: './data/example.db' });

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª–∏
    const presetModel = new PresetModel(db);
    // const monitoringHistoryModel = new MonitoringHistoryModel(db); // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–µ—Ä–∞
    const parserConfig = createParserConfig();
    const parserService = new ParserService(parserConfig, database);
    await parserService.initialize();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    if (!botToken) {
      console.log('‚ùå TELEGRAM_BOT_TOKEN not found in environment variables');
      console.log('Please set TELEGRAM_BOT_TOKEN in your .env file');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    const bot = new TelegramBotService(
      { token: botToken, polling: true },
      presetModel,
      parserService
    );

    console.log('üöÄ Starting bot...');
    await bot.start();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const botInfo = await bot.getBotInfo();
    console.log(`‚úÖ Bot started: @${botInfo.username} (${botInfo.first_name})`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const statsInterval = setInterval(() => {
      const stats = bot.getStats();
      console.log(`üìä Bot Stats: Running=${stats.isRunning}, Sessions=${stats.activeSessions}, Uptime=${Math.round(stats.uptime)}s`);
    }, 30000);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', async () => {
      console.log('\nüõë Shutting down...');
      clearInterval(statsInterval);
      await bot.stop();
      process.exit(0);
    });

    console.log('‚úÖ Bot is running! Press Ctrl+C to stop');

  } catch (error) {
    console.error('‚ùå Error running bot example:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä
runBotExample();
