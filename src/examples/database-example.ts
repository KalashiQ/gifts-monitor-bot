import { Database } from '../database/database';
import { CreatePresetData } from '../types/database';

async function databaseExample(): Promise<void> {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...\n');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const database = new Database({ path: './data/example.db' });
  
  try {
    await database.initialize();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n');

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–≤
    const presetsData: CreatePresetData[] = [
      {
        user_id: 123,
        gift_name: 'Spring Basket',
        model: 'Ritual Goat',
        background: 'Black',
        pattern: 'All patterns',
        is_active: true
      },
      {
        user_id: 123,
        gift_name: 'Summer Gift',
        model: 'Magic Cat',
        background: 'White',
        pattern: 'Stars',
        is_active: true
      },
      {
        user_id: 456,
        gift_name: 'Autumn Present',
        model: 'Forest Spirit',
        background: 'Green',
        pattern: 'Leaves',
        is_active: false
      }
    ];

    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–≤...');
    const createdPresets = [];
    for (const presetData of presetsData) {
      const preset = await database.presets.create(presetData);
      createdPresets.push(preset);
      console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–µ—Å–µ—Ç: ${preset.gift_name} (ID: ${preset.id})`);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    console.log('\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    for (const preset of createdPresets) {
      const count = Math.floor(Math.random() * 10) + 1;
      const hasChanged = Math.random() > 0.5;
      
      await database.monitoringHistory.create(preset.id, count, hasChanged);
      console.log(`  ‚úÖ –ó–∞–ø–∏—Å—å –¥–ª—è "${preset.gift_name}": ${count} –ø–æ–¥–∞—Ä–∫–æ–≤, –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${hasChanged ? '–¥–∞' : '–Ω–µ—Ç'}`);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –í—Å–µ –ø—Ä–µ—Å–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 123
    const user123Presets = await database.presets.getByUserId(123);
    console.log(`  üë§ –ü—Ä–µ—Å–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 123: ${user123Presets.length} —à—Ç.`);
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã
    const activePresets = await database.presets.getAllActive();
    console.log(`  üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã: ${activePresets.length} —à—Ç.`);
    
    // –ó–∞–ø–∏—Å–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    const changedRecords = await database.monitoringHistory.getChangedRecords();
    console.log(`  üìà –ó–∞–ø–∏—Å–µ–π —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏: ${changedRecords.length} —à—Ç.`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
    if (createdPresets.length > 0) {
      const stats = await database.monitoringHistory.getStatisticsByPresetId(createdPresets[0].id);
      console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è "${createdPresets[0].gift_name}":`);
      console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${stats.totalChecks}`);
      console.log(`  ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–π: ${stats.totalChanges}`);
      console.log(`  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${stats.averageCount.toFixed(2)}`);
      console.log(`  ‚Ä¢ –ú–∏–Ω–∏–º—É–º: ${stats.minCount}`);
      console.log(`  ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: ${stats.maxCount}`);
    }

    // –ü–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    console.log('\nüîç –ü–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º...');
    const searchResults = await database.presets.findByCriteria({
      gift_name: 'Spring Basket',
      model: 'Ritual Goat'
    });
    console.log(`  üéØ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ—Å–µ—Ç–æ–≤: ${searchResults.length} —à—Ç.`);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
    console.log('\n‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞...');
    if (createdPresets.length > 0) {
      const updatedPreset = await database.presets.update(createdPresets[0].id, {
        gift_name: 'Updated Spring Basket',
        is_active: false
      });
      console.log(`  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ—Å–µ—Ç: ${updatedPreset.gift_name} (–∞–∫—Ç–∏–≤–µ–Ω: ${updatedPreset.is_active})`);
    }

    // –ü–æ–¥—Å—á–µ—Ç –ø—Ä–µ—Å–µ—Ç–æ–≤
    const totalCount = await database.presets.countByUserId(123);
    const activeCount = await database.presets.countActiveByUserId(123);
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 123:`);
    console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–µ—Å–µ—Ç–æ–≤: ${totalCount}`);
    console.log(`  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeCount}`);

    console.log('\nüéâ –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await database.close();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  databaseExample().catch(console.error);
}

export { databaseExample };
