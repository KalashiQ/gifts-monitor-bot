import dotenv from 'dotenv';
import { Database } from '../database/database';
import { PresetModel } from '../database/models/preset.model';
import { ParserService } from '../services/parser-service';
import { TelegramBotService } from '../bot/telegram-bot';
import { BotConfig } from '../types/bot';
import { createParserConfig } from '../config/parser-config';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function accessControlExample() {
  try {
    console.log('üîê Access Control Example');
    console.log('========================');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const database = new Database({ path: './data/example.db' });
    await database.initialize();

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª–∏
    const presetModel = new PresetModel(database.getConnection());

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–µ—Ä–∞
    const parserConfig = createParserConfig();
    const parserService = new ParserService(parserConfig, database);
    await parserService.initialize();

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
    const botConfig: BotConfig = {
      token: process.env.TELEGRAM_BOT_TOKEN || '',
      polling: false // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    };

    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    const bot = new TelegramBotService(botConfig, presetModel, parserService);

    console.log('\nüìä Access Control Status:');
    console.log(`   - Enabled: ${bot.isAccessControlEnabled()}`);
    console.log(`   - Allowed users: ${bot.getAllowedUsers().join(', ')}`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞
    const testUserIds = [5753792825, 8078808957, 1234567890, 9876543210];
    
    console.log('\nüß™ Testing access control:');
    for (const userId of testUserIds) {
      const isAllowed = bot.isUserAllowed(userId);
      console.log(`   - User ${userId}: ${isAllowed ? '‚úÖ Allowed' : '‚ùå Denied'}`);
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º
    console.log('\nüîß Access Control Management:');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUserId = 9999999999;
    console.log(`\n‚ûï Adding user ${newUserId}...`);
    bot.addAllowedUser(newUserId);
    console.log(`   - User ${newUserId} added: ${bot.isUserAllowed(newUserId) ? '‚úÖ Allowed' : '‚ùå Denied'}`);
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`\n‚ûñ Removing user ${newUserId}...`);
    bot.removeAllowedUser(newUserId);
    console.log(`   - User ${newUserId} removed: ${bot.isUserAllowed(newUserId) ? '‚úÖ Allowed' : '‚ùå Denied'}`);

    // –í–∫–ª—é—á–∞–µ–º/–≤—ã–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞
    console.log('\nüîÑ Toggling access control:');
    console.log(`   - Current status: ${bot.isAccessControlEnabled()}`);
    
    bot.setAccessControlEnabled(false);
    console.log(`   - After disabling: ${bot.isAccessControlEnabled()}`);
    console.log(`   - User 1234567890 (not in list): ${bot.isUserAllowed(1234567890) ? '‚úÖ Allowed' : '‚ùå Denied'}`);
    
    bot.setAccessControlEnabled(true);
    console.log(`   - After re-enabling: ${bot.isAccessControlEnabled()}`);
    console.log(`   - User 1234567890 (not in list): ${bot.isUserAllowed(1234567890) ? '‚úÖ Allowed' : '‚ùå Denied'}`);

    console.log('\n‚úÖ Access control example completed!');

  } catch (error) {
    console.error('‚ùå Error in access control example:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä
if (require.main === module) {
  accessControlExample().catch(console.error);
}

export { accessControlExample };
