import { PeekTgParser } from '../parser/peek-tg-parser';
import { ParserConfig, SearchCriteria, SearchResult, ParserStats } from '../types/parser';
import { Database } from '../database/database';
import { Preset } from '../types/database';

export class ParserService {
  private parser: PeekTgParser;
  private database: Database;
  private isInitialized: boolean = false;

  constructor(config: ParserConfig, database: Database) {
    this.parser = new PeekTgParser(config);
    this.database = database;
  }

  public async initialize(): Promise<void> {
    if (this.isInitialized) {
      return;
    }

    try {
      await this.parser.initialize();
      this.isInitialized = true;
      console.log('‚úÖ ParserService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ParserService:', error);
      throw error;
    }
  }

  public async close(): Promise<void> {
    if (this.isInitialized) {
      await this.parser.close();
      this.isInitialized = false;
      console.log('üîå ParserService –∑–∞–∫—Ä—ã—Ç');
    }
  }

  public async searchGifts(criteria: SearchCriteria): Promise<SearchResult> {
    if (!this.isInitialized) {
      throw new Error('ParserService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      return await this.parser.searchGiftsWithRetry(criteria);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤:', error);
      throw error;
    }
  }

  public async searchGiftsForPreset(preset: Preset): Promise<SearchResult> {
    const criteria: SearchCriteria = {
      gift_name: preset.gift_name,
      model: preset.model || undefined,
      background: preset.background || undefined,
      pattern: preset.pattern || undefined
    };

    return this.searchGifts(criteria);
  }

  public async searchAllActivePresets(): Promise<Array<{ preset: Preset; result: SearchResult }>> {
    if (!this.isInitialized) {
      throw new Error('ParserService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const activePresets = await this.database.presets.getAllActive();
      const results: Array<{ preset: Preset; result: SearchResult }> = [];

      console.log(`üîç –ü–æ–∏—Å–∫ –¥–ª—è ${activePresets.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤...`);

      for (const preset of activePresets) {
        try {
          console.log(`  üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Å–µ—Ç–∞: ${preset.gift_name} (ID: ${preset.id})`);
          const result = await this.searchGiftsForPreset(preset);
          results.push({ preset, result });

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
          await this.delay(1000);

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø—Ä–µ—Å–µ—Ç–∞ ${preset.id}:`, error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
        }
      }

      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${results.length} –ø—Ä–µ—Å–µ—Ç–æ–≤`);
      return results;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤:', error);
      throw error;
    }
  }

  public async checkPresetChanges(preset: Preset): Promise<{
    hasChanged: boolean;
    oldCount: number;
    newCount: number;
    result: SearchResult;
  }> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–µ—Å–µ—Ç–∞
      const lastHistory = await this.database.monitoringHistory.getLatestByPresetId(preset.id);
      const oldCount = lastHistory?.count || 0;

      // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
      const result = await this.searchGiftsForPreset(preset);
      const newCount = result.count;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const hasChanged = newCount !== oldCount;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
      await this.database.monitoringHistory.create(preset.id, newCount, hasChanged);

      return {
        hasChanged,
        oldCount,
        newCount,
        result
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ—Å–µ—Ç–∞ ${preset.id}:`, error);
      throw error;
    }
  }

  public async checkAllPresetChanges(): Promise<Array<{
    preset: Preset;
    hasChanged: boolean;
    oldCount: number;
    newCount: number;
    result: SearchResult;
  }>> {
    if (!this.isInitialized) {
      throw new Error('ParserService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const activePresets = await this.database.presets.getAllActive();
      const results: Array<{
        preset: Preset;
        hasChanged: boolean;
        oldCount: number;
        newCount: number;
        result: SearchResult;
      }> = [];

      console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è ${activePresets.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤...`);

      for (const preset of activePresets) {
        try {
          console.log(`  üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Å–µ—Ç–∞: ${preset.gift_name} (ID: ${preset.id})`);
          const changeResult = await this.checkPresetChanges(preset);
          results.push({
            preset,
            ...changeResult
          });

          if (changeResult.hasChanged) {
            console.log(`  üéâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${preset.gift_name} - ${changeResult.oldCount} ‚Üí ${changeResult.newCount}`);
          }

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
          await this.delay(1000);

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ—Å–µ—Ç–∞ ${preset.id}:`, error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
        }
      }

      const changedCount = results.filter(r => r.hasChanged).length;
      console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${changedCount} –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ ${results.length} –ø—Ä–µ—Å–µ—Ç–æ–≤`);
      return results;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤:', error);
      throw error;
    }
  }

  public getStats(): ParserStats {
    return this.parser.getStats();
  }

  public resetStats(): void {
    this.parser.resetStats();
  }

  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}
