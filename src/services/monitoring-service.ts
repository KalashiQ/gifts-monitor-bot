import * as cron from 'node-cron';
import { Database } from '../database/database';
import { ParserService } from './parser-service';
import { TelegramBotService } from '../bot/telegram-bot';
import { MessageFormatter } from '../bot/message-formatter';
import { Preset } from '../types/database';

export interface MonitoringConfig {
  enabled: boolean;
  cronExpression: string;
  checkIntervalMinutes: number;
  retryAttempts: number;
  retryDelayMs: number;
}

export interface MonitoringStats {
  totalChecks: number;
  successfulChecks: number;
  failedChecks: number;
  totalChanges: number;
  lastCheck: Date | null;
  isRunning: boolean;
}

export class MonitoringService {
  private database: Database;
  private parserService: ParserService;
  private telegramBot: TelegramBotService;
  private config: MonitoringConfig;
  private cronJob: cron.ScheduledTask | null = null;
  private stats: MonitoringStats;
  private isInitialized: boolean = false;
  private statsMessageIds: Map<number, number> = new Map(); // userId -> messageId

  constructor(
    database: Database,
    parserService: ParserService,
    telegramBot: TelegramBotService,
    config: MonitoringConfig
  ) {
    this.database = database;
    this.parserService = parserService;
    this.telegramBot = telegramBot;
    this.config = config;
    this.stats = {
      totalChecks: 0,
      successfulChecks: 0,
      failedChecks: 0,
      totalChanges: 0,
      lastCheck: null,
      isRunning: false
    };
  }

  public async initialize(): Promise<void> {
    if (this.isInitialized) {
      return;
    }

    try {
      await this.parserService.initialize();
      this.isInitialized = true;
      console.log('‚úÖ MonitoringService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MonitoringService:', error);
      throw error;
    }
  }

  public async start(): Promise<void> {
    if (!this.isInitialized) {
      throw new Error('MonitoringService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    if (!this.config.enabled) {
      console.log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      return;
    }

    if (this.cronJob) {
      console.log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    try {
      this.cronJob = cron.schedule(this.config.cronExpression, async () => {
        await this.performMonitoringCycle();
      });

      this.cronJob.start();
      this.stats.isRunning = true;
      console.log(`üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: ${this.config.cronExpression}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
      throw error;
    }
  }

  public async stop(): Promise<void> {
    if (this.cronJob) {
      this.cronJob.stop();
      this.cronJob.destroy();
      this.cronJob = null;
      this.stats.isRunning = false;
      console.log('‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.statsMessageIds.clear();
  }

  public async performMonitoringCycle(): Promise<void> {
    if (!this.isInitialized) {
      console.error('‚ùå MonitoringService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    console.log('üîÑ –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    this.stats.totalChecks++;
    this.stats.lastCheck = new Date();

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã
      const activePresets = await this.database.presets.getAllActive();
      
      if (activePresets.length === 0) {
        console.log('üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
        this.stats.successfulChecks++;
        return;
      }

      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${activePresets.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
      const changes = await this.checkAllPresetChanges(activePresets);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      try {
        await this.sendChangeNotifications(changes);
        this.stats.successfulChecks++;
        console.log('‚úÖ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      } catch (notificationError: any) {
        // –û—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ —Å—á–∏—Ç–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏
        if (notificationError.response?.body?.error_code === 409) {
          console.log('‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.');
          this.stats.successfulChecks++; // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notificationError.message);
          this.stats.failedChecks++;
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      await this.updateStatsMessages();

    } catch (error: any) {
      this.stats.failedChecks++;
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
    }
  }

  private async checkAllPresetChanges(presets: Preset[]): Promise<Array<{
    preset: Preset;
    hasChanged: boolean;
    oldCount: number;
    newCount: number;
    result: any;
  }>> {
    const changes: Array<{
      preset: Preset;
      hasChanged: boolean;
      oldCount: number;
      newCount: number;
      result: any;
    }> = [];

    for (const preset of presets) {
      try {
        console.log(`  üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Å–µ—Ç–∞: ${preset.gift_name} (ID: ${preset.id})`);
        
        const changeResult = await this.parserService.checkPresetChanges(preset);
        changes.push({
          preset,
          ...changeResult
        });

        if (changeResult.hasChanged) {
          console.log(`  üéâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${preset.gift_name} - ${changeResult.oldCount} ‚Üí ${changeResult.newCount}`);
          this.stats.totalChanges++;
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        await this.delay(this.config.retryDelayMs);

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ—Å–µ—Ç–∞ ${preset.id}:`, error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–µ—Å–µ—Ç–∞–º–∏
      }
    }

    return changes;
  }

  private async sendChangeNotifications(changes: Array<{
    preset: Preset;
    hasChanged: boolean;
    oldCount: number;
    newCount: number;
    result: any;
  }>): Promise<void> {
    const changedPresets = changes.filter(c => c.hasChanged);

    if (changedPresets.length === 0) {
      console.log('üì≠ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
      return;
    }

    console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ ${changedPresets.length} –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö...`);

    let successCount = 0;
    let errorCount = 0;

    for (const change of changedPresets) {
      try {
        await this.sendChangeNotification(change);
        successCount++;
        await this.delay(1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
      } catch (error: any) {
        errorCount++;
        if (error.response?.body?.error_code === 409) {
          console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ—Å–µ—Ç–∞ ${change.preset.id} –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞`);
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ—Å–µ—Ç–∞ ${change.preset.id}:`, error.message);
        }
      }
    }

    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);
  }

  private async sendChangeNotification(change: {
    preset: Preset;
    hasChanged: boolean;
    oldCount: number;
    newCount: number;
    result: any;
  }): Promise<void> {
    const { preset, oldCount, newCount } = change;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥–∞—Ä–æ–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      let giftLink: string | undefined;
      if (change.hasChanged) {
        try {
          console.log(`üîó –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –ø—Ä–µ—Å–µ—Ç–∞ "${preset.gift_name}"...`);
          giftLink = await this.parserService.getLastGiftLink(preset);
          if (giftLink) {
            console.log(`‚úÖ –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${giftLink}`);
          } else {
            console.log(`‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø—Ä–µ—Å–µ—Ç–∞ "${preset.gift_name}"`);
          }
        } catch (linkError) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫: ${linkError}`);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å—Å—ã–ª–∫–∏
        }
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = this.formatChangeNotification(preset, oldCount, newCount, giftLink);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.telegramBot.sendMessage(preset.user_id, message);
      
      console.log(`üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${preset.user_id} –æ –ø—Ä–µ—Å–µ—Ç–µ "${preset.gift_name}"${giftLink ? ` —Å–æ —Å—Å—ã–ª–∫–æ–π` : ''}`);
    } catch (error: any) {
      if (error.response?.body?.error_code === 409) {
        console.log(`‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${preset.user_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.`);
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${preset.user_id}:`, error.message);
      }
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
    }
  }

  private formatChangeNotification(
    preset: Preset,
    oldCount: number,
    newCount: number,
    giftLink?: string
  ): string {
    const changeDirection = newCount > oldCount ? 'üìà' : 'üìâ';
    const changeText = newCount > oldCount ? '—É–≤–µ–ª–∏—á–∏–ª–æ—Å—å' : '—É–º–µ–Ω—å—à–∏–ª–æ—Å—å';
    
    let message = `üéÅ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–∞—Ä–∫–æ–≤*\n\n`;
    message += `üéØ *–ü—Ä–µ—Å–µ—Ç:* ${preset.gift_name}\n`;
    
    if (preset.model) {
      message += `ü§ñ *–ú–æ–¥–µ–ª—å:* ${preset.model}\n`;
    }
    if (preset.background) {
      message += `üé® *–§–æ–Ω:* ${preset.background}\n`;
    }
    if (preset.pattern) {
      message += `üîç *–£–∑–æ—Ä:* ${preset.pattern}\n`;
    }
    
    message += `\n${changeDirection} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ${changeText}: *${oldCount}* ‚Üí *${newCount}*\n`;
    message += `üìä –†–∞–∑–Ω–∏—Ü–∞: *${Math.abs(newCount - oldCount)}*\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (giftLink) {
      message += `\nüéÅ [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥–∞—Ä–æ–∫](${giftLink})`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∏—Å–∫
    const searchUrl = this.generateSearchUrl(preset);
    message += `\nüîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞ peek.tg](${searchUrl})`;
    
    return message;
  }

  private generateSearchUrl(preset: Preset): string {
    const baseUrl = 'https://peek.tg/gifts';
    const params = new URLSearchParams();
    
    params.set('gift', preset.gift_name);
    if (preset.model) {
      params.set('model', preset.model);
    }
    if (preset.background) {
      params.set('background', preset.background);
    }
    if (preset.pattern) {
      params.set('pattern', preset.pattern);
    }
    
    return `${baseUrl}?${params.toString()}`;
  }

  public getStats(): MonitoringStats {
    return { ...this.stats };
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  public setStatsMessageId(userId: number, messageId: number): void {
    this.statsMessageIds.set(userId, messageId);
  }

  // –£–¥–∞–ª–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  public removeStatsMessageId(userId: number): void {
    this.statsMessageIds.delete(userId);
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  private async updateStatsMessages(): Promise<void> {
    if (this.statsMessageIds.size === 0) {
      return;
    }

    const stats = this.getStats();
    const message = MessageFormatter.formatMonitoringStats(stats);

    for (const [userId, messageId] of this.statsMessageIds) {
      try {
        await this.telegramBot.editMessageText(userId, messageId, message, {
          parse_mode: 'HTML'
        });
      } catch (error) {
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞`);
        this.statsMessageIds.delete(userId);
      }
    }
  }

  public updateConfig(newConfig: Partial<MonitoringConfig>): void {
    this.config = { ...this.config, ...newConfig };
    console.log('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
  }

  public async cleanup(): Promise<void> {
    await this.stop();
    if (this.isInitialized) {
      await this.parserService.close();
      this.isInitialized = false;
      console.log('üîå MonitoringService –∑–∞–∫—Ä—ã—Ç');
    }
  }

  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}
