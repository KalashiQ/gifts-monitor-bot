import TelegramBot from 'node-telegram-bot-api';
import { AccessControlConfig } from '../../config/access-control';

export class AccessControlMiddleware {
  private config: AccessControlConfig;
  private bot: TelegramBot;

  constructor(config: AccessControlConfig, bot: TelegramBot) {
    this.config = config;
    this.bot = bot;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
   */
  public isUserAllowed(userId: number): boolean {
    if (!this.config.enabled) {
      return true; // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–∫–ª—é—á–µ–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
    }

    return this.config.allowedUserIds.includes(userId);
  }

  /**
   * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º
   */
  public checkAccess = (handler: (msg: TelegramBot.Message) => Promise<void>) => {
    return async (msg: TelegramBot.Message): Promise<void> => {
      const userId = msg.from?.id;
      
      if (!userId) {
        console.warn('Access control: User ID not found in message');
        return;
      }

      if (!this.isUserAllowed(userId)) {
        console.log(`Access denied for user ${userId} (${msg.from?.first_name || 'Unknown'})`);
        
        const accessDeniedMessage = 
          'üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n' +
          '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n' +
          '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.';

        try {
          await this.bot.sendMessage(msg.chat.id, accessDeniedMessage, {
            parse_mode: 'HTML'
          });
        } catch (error) {
          console.error('Error sending access denied message:', error);
        }
        
        return;
      }

      // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      await handler(msg);
    };
  };

  /**
   * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ callback –∑–∞–ø—Ä–æ—Å–∞–º
   */
  public checkCallbackAccess = (handler: (query: TelegramBot.CallbackQuery) => Promise<void>) => {
    return async (query: TelegramBot.CallbackQuery): Promise<void> => {
      const userId = query.from?.id;
      
      if (!userId) {
        console.warn('Access control: User ID not found in callback query');
        return;
      }

      if (!this.isUserAllowed(userId)) {
        console.log(`Access denied for callback from user ${userId} (${query.from?.first_name || 'Unknown'})`);
        
        const accessDeniedMessage = 
          'üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n' +
          '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n' +
          '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.';

        try {
          await this.bot.answerCallbackQuery(query.id, {
            text: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
            show_alert: true
          });
          
          await this.bot.sendMessage(query.message?.chat?.id || 0, accessDeniedMessage, {
            parse_mode: 'HTML'
          });
        } catch (error) {
          console.error('Error handling access denied callback:', error);
        }
        
        return;
      }

      // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      await handler(query);
    };
  };

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  public getAllowedUsers(): number[] {
    return [...this.config.allowedUserIds];
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
   */
  public addAllowedUser(userId: number): void {
    if (!this.config.allowedUserIds.includes(userId)) {
      this.config.allowedUserIds.push(userId);
      console.log(`Added user ${userId} to allowed list`);
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
   */
  public removeAllowedUser(userId: number): void {
    const index = this.config.allowedUserIds.indexOf(userId);
    if (index > -1) {
      this.config.allowedUserIds.splice(index, 1);
      console.log(`Removed user ${userId} from allowed list`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞
   */
  public isEnabled(): boolean {
    return this.config.enabled;
  }

  /**
   * –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞
   */
  public setEnabled(enabled: boolean): void {
    this.config.enabled = enabled;
    console.log(`Access control ${enabled ? 'enabled' : 'disabled'}`);
  }
}
