import TelegramBot from 'node-telegram-bot-api';
import { PresetModel } from '../../database/models/preset.model';
import { ParserService } from '../../services/parser-service';
import { MessageFormatter } from '../message-formatter';
import { InputValidator } from '../validators';
import { 
  presetActions, 
  presetsListKeyboard, 
  editPresetKeyboard, 
  confirmDeleteKeyboard,
  checkResultsKeyboard,
  parseCallbackData 
} from '../keyboards';
import { mainMenu } from '../keyboards';

export class CallbackHandlers {
  private bot: TelegramBot;
  private presetModel: PresetModel;
  private parserService: ParserService;

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Preset –≤ PresetDisplayData
  private convertToPresetDisplayData(preset: any): any {
    return {
      ...preset,
      model: preset.model || undefined,
      background: preset.background || undefined,
      pattern: preset.pattern || undefined,
      last_checked: undefined,
      last_count: undefined
    };
  }

  constructor(
    bot: TelegramBot,
    presetModel: PresetModel,
    parserService: ParserService
  ) {
    this.bot = bot;
    this.presetModel = presetModel;
    this.parserService = parserService;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
  public async handleCallbackQuery(query: TelegramBot.CallbackQuery): Promise<void> {
    const chatId = query.message?.chat.id;
    const messageId = query.message?.message_id;
    const data = query.data;

    if (!chatId || !messageId || !data) {
      return;
    }

    try {
      const callbackData = parseCallbackData(data);
      await this.processCallbackAction(chatId, messageId, callbackData, query);
    } catch (error) {
      console.error('Error handling callback:', error);
      await this.bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π callback
  private async processCallbackAction(
    chatId: number, 
    messageId: number, 
    data: any, 
    query: TelegramBot.CallbackQuery
  ): Promise<void> {
    switch (data.action) {
      case 'view_preset':
        await this.handleViewPreset(chatId, messageId, data.presetId);
        break;
      case 'toggle_preset':
        await this.handleTogglePreset(chatId, messageId, data.presetId, query);
        break;
      case 'edit_preset':
        await this.handleEditPreset(chatId, messageId, data.presetId);
        break;
      case 'delete_preset':
        await this.handleDeletePreset(chatId, messageId, data.presetId);
        break;
      case 'check_preset':
        await this.handleCheckPreset(chatId, messageId, data.presetId, query);
        break;
      case 'confirm_delete':
        await this.handleConfirmDelete(chatId, messageId, data.presetId, query);
        break;
      case 'cancel_delete':
        await this.handleCancelDelete(chatId, messageId, data.presetId);
        break;
      case 'back_to_menu':
        await this.handleBackToMenu(chatId, messageId);
        break;
      case 'back_to_presets':
        await this.handleBackToPresets(chatId, messageId);
        break;
      case 'prev_page':
        await this.handlePrevPage(chatId, messageId, data.page);
        break;
      case 'next_page':
        await this.handleNextPage(chatId, messageId, data.page);
        break;
      case 'noop':
        await this.bot.answerCallbackQuery(query.id);
        break;
      default:
        await this.bot.answerCallbackQuery(query.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
    }
  }

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ—Å–µ—Ç–∞
  private async handleViewPreset(chatId: number, messageId: number, presetId: number): Promise<void> {
    try {
      const validation = InputValidator.validatePresetId(presetId);
      if (!validation.isValid) {
        await this.bot.answerCallbackQuery('', { text: validation.error! });
        return;
      }

      const preset = await this.presetModel.getById(presetId);
      const presetMessage = MessageFormatter.formatPreset(this.convertToPresetDisplayData(preset));

      await this.bot.editMessageText(presetMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: presetActions(presetId, preset.is_active)
      });
    } catch (error) {
      console.error('Error viewing preset:', error);
      await this.bot.answerCallbackQuery('', { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ—Å–µ—Ç–∞' });
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ—Å–µ—Ç–∞
  private async handleTogglePreset(
    chatId: number, 
    messageId: number, 
    presetId: number, 
    query: TelegramBot.CallbackQuery
  ): Promise<void> {
    try {
      const validation = InputValidator.validatePresetId(presetId);
      if (!validation.isValid) {
        await this.bot.answerCallbackQuery(query.id, { text: validation.error! });
        return;
      }

      const preset = await this.presetModel.toggleActive(presetId);
      const presetMessage = MessageFormatter.formatPreset(this.convertToPresetDisplayData(preset));

      await this.bot.editMessageText(presetMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: presetActions(presetId, preset.is_active)
      });

      const statusText = preset.is_active ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
      await this.bot.answerCallbackQuery(query.id, { text: `–ü—Ä–µ—Å–µ—Ç ${statusText}` });
    } catch (error) {
      console.error('Error toggling preset:', error);
      await this.bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞' });
    }
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
  private async handleEditPreset(chatId: number, messageId: number, presetId: number): Promise<void> {
    try {
      const validation = InputValidator.validatePresetId(presetId);
      if (!validation.isValid) {
        await this.bot.answerCallbackQuery('', { text: validation.error! });
        return;
      }

      const preset = await this.presetModel.getById(presetId);
      const editMessage = 
        `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞</b>\n\n` +
        `üéÅ <b>${preset.gift_name}</b>\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`;

      await this.bot.editMessageText(editMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: editPresetKeyboard(presetId)
      });
    } catch (error) {
      console.error('Error editing preset:', error);
      await this.bot.answerCallbackQuery('', { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ—Å–µ—Ç–∞' });
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
  private async handleDeletePreset(chatId: number, messageId: number, presetId: number): Promise<void> {
    try {
      const validation = InputValidator.validatePresetId(presetId);
      if (!validation.isValid) {
        await this.bot.answerCallbackQuery('', { text: validation.error! });
        return;
      }

      const preset = await this.presetModel.getById(presetId);
      const confirmMessage = MessageFormatter.formatConfirmation(
        '—É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ—Å–µ—Ç',
        `üéÅ <b>${preset.gift_name}</b>\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`
      );

      await this.bot.editMessageText(confirmMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: confirmDeleteKeyboard(presetId)
      });
    } catch (error) {
      console.error('Error deleting preset:', error);
      await this.bot.answerCallbackQuery('', { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ—Å–µ—Ç–∞' });
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
  private async handleConfirmDelete(
    chatId: number, 
    messageId: number, 
    presetId: number, 
    query: TelegramBot.CallbackQuery
  ): Promise<void> {
    try {
      const validation = InputValidator.validatePresetId(presetId);
      if (!validation.isValid) {
        await this.bot.answerCallbackQuery(query.id, { text: validation.error! });
        return;
      }

      const preset = await this.presetModel.getById(presetId);
      await this.presetModel.delete(presetId);

      const successMessage = MessageFormatter.formatPresetDeleted(preset.gift_name);
      await this.bot.editMessageText(successMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ—Å–µ—Ç–∞–º', callback_data: JSON.stringify({ action: 'back_to_presets' }) }]] }
      });

      await this.bot.answerCallbackQuery(query.id, { text: '–ü—Ä–µ—Å–µ—Ç —É–¥–∞–ª–µ–Ω' });
    } catch (error) {
      console.error('Error confirming delete:', error);
      await this.bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞' });
    }
  }

  // –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
  private async handleCancelDelete(chatId: number, messageId: number, presetId: number): Promise<void> {
    try {
      const preset = await this.presetModel.getById(presetId);
      const presetMessage = MessageFormatter.formatPreset(this.convertToPresetDisplayData(preset));

      await this.bot.editMessageText(presetMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: presetActions(presetId, preset.is_active)
      });
    } catch (error) {
      console.error('Error canceling delete:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Å–µ—Ç–∞
  private async handleCheckPreset(
    chatId: number, 
    messageId: number, 
    presetId: number, 
    query: TelegramBot.CallbackQuery
  ): Promise<void> {
    try {
      const validation = InputValidator.validatePresetId(presetId);
      if (!validation.isValid) {
        await this.bot.answerCallbackQuery(query.id, { text: validation.error! });
        return;
      }

      const preset = await this.presetModel.getById(presetId);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
      await this.bot.editMessageText(
        `üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–µ—Å–µ—Ç "${preset.gift_name}"...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...`,
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'HTML'
        }
      );

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
      const result = await this.parserService.searchGifts({
        gift_name: preset.gift_name,
        model: preset.model || undefined,
        background: preset.background || undefined,
        pattern: preset.pattern || undefined
      });

      const resultMessage = MessageFormatter.formatCheckResult(preset, result.count);
      await this.bot.editMessageText(resultMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: checkResultsKeyboard(presetId)
      });

      await this.bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' });
    } catch (error) {
      console.error('Error checking preset:', error);
      await this.bot.editMessageText(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ—Å–µ—Ç–∞ "${presetId}"`,
        {
          chat_id: chatId,
          message_id: messageId
        }
      );
      await this.bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ' });
    }
  }

  // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  private async handleBackToMenu(chatId: number, _messageId: number): Promise<void> {
    await this.bot.sendMessage(chatId, 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
      reply_markup: mainMenu
    });
  }

  // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ—Å–µ—Ç–æ–≤
  private async handleBackToPresets(chatId: number, messageId: number): Promise<void> {
    try {
      const presets = await this.presetModel.getByUserId(chatId);
      const displayData = presets.map(preset => this.convertToPresetDisplayData(preset));

      const message = MessageFormatter.formatPresetsList(displayData);
      const keyboard = presetsListKeyboard(displayData);

      await this.bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('Error going back to presets:', error);
      await this.bot.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ—Å–µ—Ç–æ–≤',
        {
          chat_id: chatId,
          message_id: messageId
        }
      );
    }
  }

  // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  private async handlePrevPage(chatId: number, messageId: number, page: number): Promise<void> {
    try {
      const presets = await this.presetModel.getByUserId(chatId);
      const displayData = presets.map(preset => this.convertToPresetDisplayData(preset));

      const message = MessageFormatter.formatPresetsList(displayData, page);
      const keyboard = presetsListKeyboard(displayData, page);

      await this.bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('Error handling prev page:', error);
    }
  }

  // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  private async handleNextPage(chatId: number, messageId: number, page: number): Promise<void> {
    try {
      const presets = await this.presetModel.getByUserId(chatId);
      const displayData = presets.map(preset => this.convertToPresetDisplayData(preset));

      const message = MessageFormatter.formatPresetsList(displayData, page);
      const keyboard = presetsListKeyboard(displayData, page);

      await this.bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('Error handling next page:', error);
    }
  }
}
