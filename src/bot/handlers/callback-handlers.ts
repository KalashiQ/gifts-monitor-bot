import TelegramBot from 'node-telegram-bot-api';
import { PresetModel } from '../../database/models/preset.model';
import { ParserService } from '../../services/parser-service';
import { MonitoringService } from '../../services/monitoring-service';
import { MessageFormatter } from '../message-formatter';
import { InputValidator } from '../validators';
import { SessionManager } from '../session-manager';
import { UserState } from '../../types/bot';
import { 
  presetActions, 
  presetsListKeyboard, 
  editPresetKeyboard, 
  confirmDeleteKeyboard,
  checkResultsKeyboard,
  monitoringKeyboard,
  parseCallbackData 
} from '../keyboards';
import { mainMenu } from '../keyboards';

export class CallbackHandlers {
  private bot: TelegramBot;
  private presetModel: PresetModel;
  private parserService: ParserService;
  private monitoringService?: MonitoringService;
  private sessionManager: SessionManager;

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Preset –≤ PresetDisplayData
  private convertToPresetDisplayData(preset: any): any {
    return {
      ...preset,
      model: preset.model || undefined,
      background: preset.background || undefined,
      pattern: preset.pattern || undefined,
      last_checked: undefined,
      last_count: undefined
    };
  }

  constructor(
    bot: TelegramBot,
    presetModel: PresetModel,
    parserService: ParserService,
    sessionManager: SessionManager,
    monitoringService?: MonitoringService
  ) {
    this.bot = bot;
    this.presetModel = presetModel;
    this.parserService = parserService;
    this.monitoringService = monitoringService;
    this.sessionManager = sessionManager;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
  public async handleCallbackQuery(query: TelegramBot.CallbackQuery): Promise<void> {
    const chatId = query.message?.chat.id;
    const messageId = query.message?.message_id;
    const data = query.data;

    if (!chatId || !messageId || !data) {
      return;
    }

    try {
      const callbackData = parseCallbackData(data);
      await this.processCallbackAction(chatId, messageId, callbackData, query);
    } catch (error) {
      console.error('Error handling callback:', error);
      await this.bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π callback
  private async processCallbackAction(
    chatId: number, 
    messageId: number, 
    data: any, 
    query: TelegramBot.CallbackQuery
  ): Promise<void> {
    switch (data.action) {
      case 'view_preset':
        await this.handleViewPreset(chatId, messageId, data.presetId);
        break;
      case 'toggle_preset':
        await this.handleTogglePreset(chatId, messageId, data.presetId, query);
        break;
      case 'edit_preset':
        await this.handleEditPreset(chatId, messageId, data.presetId);
        break;
      case 'delete_preset':
        await this.handleDeletePreset(chatId, messageId, data.presetId);
        break;
      case 'check_preset':
        await this.handleCheckPreset(chatId, messageId, data.presetId, query);
        break;
      case 'confirm_delete':
        await this.handleConfirmDelete(chatId, messageId, data.presetId, query);
        break;
      case 'cancel_delete':
        await this.handleCancelDelete(chatId, messageId, data.presetId);
        break;
      case 'back_to_menu':
        await this.handleBackToMenu(chatId, messageId);
        break;
      case 'start_monitoring':
        await this.handleStartMonitoring(chatId, messageId, query);
        break;
      case 'stop_monitoring':
        await this.handleStopMonitoring(chatId, messageId, query);
        break;
      case 'back_to_presets':
        await this.handleBackToPresets(chatId, messageId);
        break;
      case 'prev_page':
        await this.handlePrevPage(chatId, messageId, data.page);
        break;
      case 'next_page':
        await this.handleNextPage(chatId, messageId, data.page);
        break;
      case 'edit_gift':
        await this.handleEditGift(chatId, messageId, data.presetId);
        break;
      case 'edit_model':
        await this.handleEditModel(chatId, messageId, data.presetId);
        break;
      case 'edit_background':
        await this.handleEditBackground(chatId, messageId, data.presetId);
        break;
      case 'edit_pattern':
        await this.handleEditPattern(chatId, messageId, data.presetId);
        break;
      case 'search_presets':
        await this.handleSearchPresets(chatId, messageId);
        break;
      case 'filter_active':
        await this.handleFilterActive(chatId, messageId, data.filter);
        break;
      case 'filter_inactive':
        await this.handleFilterInactive(chatId, messageId, data.filter);
        break;
      case 'filter_all':
        await this.handleFilterAll(chatId, messageId, data.filter);
        break;
      case 'noop':
        await this.bot.answerCallbackQuery(query.id);
        break;
      default:
        await this.bot.answerCallbackQuery(query.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
    }
  }

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ—Å–µ—Ç–∞
  private async handleViewPreset(chatId: number, messageId: number, presetId: number): Promise<void> {
    try {
      const validation = InputValidator.validatePresetId(presetId);
      if (!validation.isValid) {
        await this.bot.answerCallbackQuery('', { text: validation.error! });
        return;
      }

      const preset = await this.presetModel.getById(presetId);
      const presetMessage = MessageFormatter.formatPreset(this.convertToPresetDisplayData(preset));

      await this.bot.editMessageText(presetMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: presetActions(presetId, preset.is_active)
      });
    } catch (error) {
      console.error('Error viewing preset:', error);
      await this.bot.answerCallbackQuery('', { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ—Å–µ—Ç–∞' });
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ—Å–µ—Ç–∞
  private async handleTogglePreset(
    chatId: number, 
    messageId: number, 
    presetId: number, 
    query: TelegramBot.CallbackQuery
  ): Promise<void> {
    try {
      const validation = InputValidator.validatePresetId(presetId);
      if (!validation.isValid) {
        await this.bot.answerCallbackQuery(query.id, { text: validation.error! });
        return;
      }

      const preset = await this.presetModel.toggleActive(presetId);
      const presetMessage = MessageFormatter.formatPreset(this.convertToPresetDisplayData(preset));

      await this.bot.editMessageText(presetMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: presetActions(presetId, preset.is_active)
      });

      const statusText = preset.is_active ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
      await this.bot.answerCallbackQuery(query.id, { text: `–ü—Ä–µ—Å–µ—Ç ${statusText}` });
    } catch (error) {
      console.error('Error toggling preset:', error);
      await this.bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞' });
    }
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
  private async handleEditPreset(chatId: number, messageId: number, presetId: number): Promise<void> {
    try {
      const validation = InputValidator.validatePresetId(presetId);
      if (!validation.isValid) {
        await this.bot.answerCallbackQuery('', { text: validation.error! });
        return;
      }

      const preset = await this.presetModel.getById(presetId);
      const editMessage = 
        `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞</b>\n\n` +
        `üéÅ <b>${preset.gift_name}</b>\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`;

      await this.bot.editMessageText(editMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: editPresetKeyboard(presetId)
      });
    } catch (error) {
      console.error('Error editing preset:', error);
      await this.bot.answerCallbackQuery('', { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ—Å–µ—Ç–∞' });
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
  private async handleDeletePreset(chatId: number, messageId: number, presetId: number): Promise<void> {
    try {
      const validation = InputValidator.validatePresetId(presetId);
      if (!validation.isValid) {
        await this.bot.answerCallbackQuery('', { text: validation.error! });
        return;
      }

      const preset = await this.presetModel.getById(presetId);
      const confirmMessage = MessageFormatter.formatConfirmation(
        '—É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ—Å–µ—Ç',
        `üéÅ <b>${preset.gift_name}</b>\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`
      );

      await this.bot.editMessageText(confirmMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: confirmDeleteKeyboard(presetId)
      });
    } catch (error) {
      console.error('Error deleting preset:', error);
      await this.bot.answerCallbackQuery('', { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ—Å–µ—Ç–∞' });
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
  private async handleConfirmDelete(
    chatId: number, 
    messageId: number, 
    presetId: number, 
    query: TelegramBot.CallbackQuery
  ): Promise<void> {
    try {
      const validation = InputValidator.validatePresetId(presetId);
      if (!validation.isValid) {
        await this.bot.answerCallbackQuery(query.id, { text: validation.error! });
        return;
      }

      const preset = await this.presetModel.getById(presetId);
      await this.presetModel.delete(presetId);

      const successMessage = MessageFormatter.formatPresetDeleted(preset.gift_name);
      await this.bot.editMessageText(successMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ—Å–µ—Ç–∞–º', callback_data: JSON.stringify({ action: 'back_to_presets' }) }]] }
      });

      await this.bot.answerCallbackQuery(query.id, { text: '–ü—Ä–µ—Å–µ—Ç —É–¥–∞–ª–µ–Ω' });
    } catch (error) {
      console.error('Error confirming delete:', error);
      await this.bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞' });
    }
  }

  // –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
  private async handleCancelDelete(chatId: number, messageId: number, presetId: number): Promise<void> {
    try {
      const preset = await this.presetModel.getById(presetId);
      const presetMessage = MessageFormatter.formatPreset(this.convertToPresetDisplayData(preset));

      await this.bot.editMessageText(presetMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: presetActions(presetId, preset.is_active)
      });
    } catch (error) {
      console.error('Error canceling delete:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Å–µ—Ç–∞
  private async handleCheckPreset(
    chatId: number, 
    messageId: number, 
    presetId: number, 
    query: TelegramBot.CallbackQuery
  ): Promise<void> {
    try {
      const validation = InputValidator.validatePresetId(presetId);
      if (!validation.isValid) {
        await this.bot.answerCallbackQuery(query.id, { text: validation.error! });
        return;
      }

      const preset = await this.presetModel.getById(presetId);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
      await this.bot.editMessageText(
        `üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–µ—Å–µ—Ç "${preset.gift_name}"...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...`,
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'HTML'
        }
      );

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
      const result = await this.parserService.searchGifts({
        gift_name: preset.gift_name,
        model: preset.model || undefined,
        background: preset.background || undefined,
        pattern: preset.pattern || undefined
      });

      const resultMessage = MessageFormatter.formatCheckResult(preset, result.count);
      await this.bot.editMessageText(resultMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: checkResultsKeyboard(presetId)
      });

      await this.bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' });
    } catch (error) {
      console.error('Error checking preset:', error);
      await this.bot.editMessageText(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ—Å–µ—Ç–∞ "${presetId}"`,
        {
          chat_id: chatId,
          message_id: messageId
        }
      );
      await this.bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ' });
    }
  }

  // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  private async handleBackToMenu(chatId: number, _messageId: number): Promise<void> {
    await this.bot.sendMessage(chatId, 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
      reply_markup: mainMenu
    });
  }

  // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ—Å–µ—Ç–æ–≤
  private async handleBackToPresets(chatId: number, messageId: number): Promise<void> {
    try {
      const presets = await this.presetModel.getByUserId(chatId);
      const displayData = presets.map(preset => this.convertToPresetDisplayData(preset));

      const message = MessageFormatter.formatPresetsList(displayData, 0, 5);
      const keyboard = presetsListKeyboard(displayData, 0, 5);

      await this.bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('Error going back to presets:', error);
      await this.bot.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ—Å–µ—Ç–æ–≤',
        {
          chat_id: chatId,
          message_id: messageId
        }
      );
    }
  }

  // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  private async handlePrevPage(chatId: number, messageId: number, page: number): Promise<void> {
    try {
      const presets = await this.presetModel.getByUserId(chatId);
      const displayData = presets.map(preset => this.convertToPresetDisplayData(preset));

      const message = MessageFormatter.formatPresetsList(displayData, page, 5);
      const keyboard = presetsListKeyboard(displayData, page, 5);

      await this.bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('Error handling prev page:', error);
    }
  }

  // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  private async handleNextPage(chatId: number, messageId: number, page: number): Promise<void> {
    try {
      const presets = await this.presetModel.getByUserId(chatId);
      const displayData = presets.map(preset => this.convertToPresetDisplayData(preset));

      const message = MessageFormatter.formatPresetsList(displayData, page, 5);
      const keyboard = presetsListKeyboard(displayData, page, 5);

      await this.bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('Error handling next page:', error);
    }
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞
  private async handleEditGift(chatId: number, messageId: number, presetId: number): Promise<void> {
    try {
      const preset = await this.presetModel.getById(presetId);
      const editMessage = 
        `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞</b>\n\n` +
        `–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>${preset.gift_name}</b>\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞:`;

      await this.bot.editMessageText(editMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: JSON.stringify({ action: 'edit_preset', presetId }) }]] }
      });

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      this.sessionManager.updateState(chatId, UserState.EDITING_PRESET_GIFT);
      this.sessionManager.setData(chatId, 'editing_preset_id', presetId);
    } catch (error) {
      console.error('Error editing gift:', error);
    }
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
  private async handleEditModel(chatId: number, messageId: number, presetId: number): Promise<void> {
    try {
      const preset = await this.presetModel.getById(presetId);
      const currentModel = preset.model || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
      const editMessage = 
        `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</b>\n\n` +
        `–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: <b>${currentModel}</b>\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ "—É–¥–∞–ª–∏—Ç—å" –¥–ª—è –æ—á–∏—Å—Ç–∫–∏:`;

      await this.bot.editMessageText(editMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: JSON.stringify({ action: 'edit_preset', presetId }) }]] }
      });

      this.sessionManager.updateState(chatId, UserState.EDITING_PRESET_MODEL);
      this.sessionManager.setData(chatId, 'editing_preset_id', presetId);
    } catch (error) {
      console.error('Error editing model:', error);
    }
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ–Ω–∞
  private async handleEditBackground(chatId: number, messageId: number, presetId: number): Promise<void> {
    try {
      const preset = await this.presetModel.getById(presetId);
      const currentBackground = preset.background || '–Ω–µ —É–∫–∞–∑–∞–Ω';
      const editMessage = 
        `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ–Ω–∞</b>\n\n` +
        `–¢–µ–∫—É—â–∏–π —Ñ–æ–Ω: <b>${currentBackground}</b>\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–æ–Ω –∏–ª–∏ "—É–¥–∞–ª–∏—Ç—å" –¥–ª—è –æ—á–∏—Å—Ç–∫–∏:`;

      await this.bot.editMessageText(editMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: JSON.stringify({ action: 'edit_preset', presetId }) }]] }
      });

      this.sessionManager.updateState(chatId, UserState.EDITING_PRESET_BACKGROUND);
      this.sessionManager.setData(chatId, 'editing_preset_id', presetId);
    } catch (error) {
      console.error('Error editing background:', error);
    }
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∑–æ—Ä–∞
  private async handleEditPattern(chatId: number, messageId: number, presetId: number): Promise<void> {
    try {
      const preset = await this.presetModel.getById(presetId);
      const currentPattern = preset.pattern || '–Ω–µ —É–∫–∞–∑–∞–Ω';
      const editMessage = 
        `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∑–æ—Ä–∞</b>\n\n` +
        `–¢–µ–∫—É—â–∏–π —É–∑–æ—Ä: <b>${currentPattern}</b>\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —É–∑–æ—Ä –∏–ª–∏ "—É–¥–∞–ª–∏—Ç—å" –¥–ª—è –æ—á–∏—Å—Ç–∫–∏:`;

      await this.bot.editMessageText(editMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: JSON.stringify({ action: 'edit_preset', presetId }) }]] }
      });

      this.sessionManager.updateState(chatId, UserState.EDITING_PRESET_PATTERN);
      this.sessionManager.setData(chatId, 'editing_preset_id', presetId);
    } catch (error) {
      console.error('Error editing pattern:', error);
    }
  }

  // –ü–æ–∏—Å–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤
  private async handleSearchPresets(chatId: number, messageId: number): Promise<void> {
    const searchMessage = 
      `üîç <b>–ü–æ–∏—Å–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤</b>\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:`;

    await this.bot.editMessageText(searchMessage, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: JSON.stringify({ action: 'back_to_presets' }) }]] }
    });
  }

  // –§–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
  private async handleFilterActive(chatId: number, messageId: number, _filter: any): Promise<void> {
    try {
      const presets = await this.presetModel.getActiveByUserId(chatId);
      const displayData = presets.map(preset => this.convertToPresetDisplayData(preset));

      const message = MessageFormatter.formatPresetsList(displayData, 0, 5, '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã');
      const keyboard = presetsListKeyboard(displayData, 0, 5);

      await this.bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('Error filtering active presets:', error);
    }
  }

  // –§–∏–ª—å—Ç—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
  private async handleFilterInactive(chatId: number, messageId: number, _filter: any): Promise<void> {
    try {
      const allPresets = await this.presetModel.getByUserId(chatId);
      const presets = allPresets.filter(p => !p.is_active);
      const displayData = presets.map(preset => this.convertToPresetDisplayData(preset));

      const message = MessageFormatter.formatPresetsList(displayData, 0, 5, '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã');
      const keyboard = presetsListKeyboard(displayData, 0, 5);

      await this.bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('Error filtering inactive presets:', error);
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–µ—Å–µ—Ç—ã
  private async handleFilterAll(chatId: number, messageId: number, _filter: any): Promise<void> {
    try {
      const presets = await this.presetModel.getByUserId(chatId);
      const displayData = presets.map(preset => this.convertToPresetDisplayData(preset));

      const message = MessageFormatter.formatPresetsList(displayData, 0, 5, '–í—Å–µ –ø—Ä–µ—Å–µ—Ç—ã');
      const keyboard = presetsListKeyboard(displayData, 0, 5);

      await this.bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('Error showing all presets:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  private async handleStartMonitoring(chatId: number, messageId: number, query: TelegramBot.CallbackQuery): Promise<void> {
    if (!this.monitoringService) {
      await this.bot.answerCallbackQuery(query.id, { text: '‚ùå –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
      return;
    }

    try {
      await this.monitoringService.start();
      await this.bot.answerCallbackQuery(query.id, { text: '‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω' });
      
      const stats = this.monitoringService.getStats();
      const message = `üîÑ *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω*\n\n` +
                     `üìä *–°—Ç–∞—Ç—É—Å:* üü¢ –ê–∫—Ç–∏–≤–µ–Ω\n` +
                     `üìà *–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫:* ${stats.totalChecks}\n` +
                     `‚úÖ *–£—Å–ø–µ—à–Ω—ã—Ö:* ${stats.successfulChecks}\n` +
                     `‚ùå *–ù–µ—É–¥–∞—á–Ω—ã—Ö:* ${stats.failedChecks}\n` +
                     `üéØ *–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:* ${stats.totalChanges}\n\n` +
                     `–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤–∞—à–∏ –ø—Ä–µ—Å–µ—Ç—ã –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.`;

      await this.bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: monitoringKeyboard
      });
    } catch (error) {
      console.error('Error starting monitoring:', error);
      await this.bot.answerCallbackQuery(query.id, { text: '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞' });
    }
  }

  private async handleStopMonitoring(chatId: number, messageId: number, query: TelegramBot.CallbackQuery): Promise<void> {
    if (!this.monitoringService) {
      await this.bot.answerCallbackQuery(query.id, { text: '‚ùå –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
      return;
    }

    try {
      await this.monitoringService.stop();
      await this.bot.answerCallbackQuery(query.id, { text: '‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
      
      const stats = this.monitoringService.getStats();
      const message = `‚èπÔ∏è *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n\n` +
                     `üìä *–°—Ç–∞—Ç—É—Å:* üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n` +
                     `üìà *–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫:* ${stats.totalChecks}\n` +
                     `‚úÖ *–£—Å–ø–µ—à–Ω—ã—Ö:* ${stats.successfulChecks}\n` +
                     `‚ùå *–ù–µ—É–¥–∞—á–Ω—ã—Ö:* ${stats.failedChecks}\n` +
                     `üéØ *–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:* ${stats.totalChanges}\n\n` +
                     `–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥".`;

      await this.bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: monitoringKeyboard
      });
    } catch (error) {
      console.error('Error stopping monitoring:', error);
      await this.bot.answerCallbackQuery(query.id, { text: '‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞' });
    }
  }

}
