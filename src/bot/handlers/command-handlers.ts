import TelegramBot from 'node-telegram-bot-api';
import { SessionManager } from '../session-manager';
import { UserState } from '../../types/bot';
import { PresetModel } from '../../database/models/preset.model';
import { ParserService } from '../../services/parser-service';
import { MonitoringService } from '../../services/monitoring-service';
import { MessageFormatter } from '../message-formatter';
import { InputValidator } from '../validators';
import { mainMenu, cancelKeyboard, skipKeyboard, presetsListKeyboard, monitoringKeyboard } from '../keyboards';

export class CommandHandlers {
  private bot: TelegramBot;
  private sessionManager: SessionManager;
  private presetModel: PresetModel;
  private parserService: ParserService;
  private monitoringService?: MonitoringService;

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Preset –≤ PresetDisplayData
  private convertToPresetDisplayData(preset: any): any {
    return {
      ...preset,
      model: preset.model || undefined,
      background: preset.background || undefined,
      pattern: preset.pattern || undefined,
      last_checked: undefined,
      last_count: undefined
    };
  }

  constructor(
    bot: TelegramBot,
    sessionManager: SessionManager,
    presetModel: PresetModel,
    parserService: ParserService,
    monitoringService?: MonitoringService
  ) {
    this.bot = bot;
    this.sessionManager = sessionManager;
    this.presetModel = presetModel;
    this.parserService = parserService;
    this.monitoringService = monitoringService;
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
  public async handleStart(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;
    const userName = msg.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    this.sessionManager.resetSession(chatId);
    
    const welcomeMessage = MessageFormatter.formatWelcomeMessage(userName);
    await this.bot.sendMessage(chatId, welcomeMessage, {
      parse_mode: 'HTML',
      reply_markup: mainMenu
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
  public async handleHelp(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;
    const helpMessage = MessageFormatter.formatHelpMessage();
    
    await this.bot.sendMessage(chatId, helpMessage, {
      parse_mode: 'HTML',
      reply_markup: mainMenu
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
  public async handleMenu(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;
    this.sessionManager.resetSession(chatId);
    
    await this.bot.sendMessage(chatId, 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
      reply_markup: mainMenu
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
  public async handleStats(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;
    
    try {
      const presets = await this.presetModel.getByUserId(chatId);
      const activePresets = presets.filter(p => p.is_active);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      const stats = {
        totalPresets: presets.length,
        activePresets: activePresets.length,
        totalChecks: 0, // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        changesDetected: 0, // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
        lastCheck: undefined as Date | undefined
      };

      const statsMessage = MessageFormatter.formatStats(stats);
      await this.bot.sendMessage(chatId, statsMessage, {
        parse_mode: 'HTML',
        reply_markup: mainMenu
      });
    } catch (error) {
      console.error('Error getting stats:', error);
      await this.bot.sendMessage(chatId, MessageFormatter.formatError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  public async handleTextMessage(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;
    const text = msg.text || '';
    const session = this.sessionManager.getSession(chatId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if (text === 'üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Å–µ—Ç') {
      await this.handleAddPreset(chatId);
      return;
    }

    if (text === 'üìã –ú–æ–∏ –ø—Ä–µ—Å–µ—Ç—ã') {
      await this.handleMyPresets(chatId);
      return;
    }

    if (text === 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å') {
      await this.handleCheckNow(chatId);
      return;
    }

    if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
      await this.handleStats(msg);
      return;
    }

    if (text === 'üîé –ü–æ–∏—Å–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤') {
      await this.handleSearchPresets(chatId);
      return;
    }

    if (text === '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏') {
      await this.handleSettings(chatId);
      return;
    }

    if (text === 'üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥') {
      await this.handleMonitoringButton(msg);
      return;
    }

    if (text === '‚ÑπÔ∏è –ü–æ–º–æ—â—å') {
      await this.handleHelp(msg);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    switch (session.state) {
      case UserState.ADDING_PRESET_GIFT:
        await this.handleGiftNameInput(chatId, text);
        break;
      case UserState.ADDING_PRESET_MODEL:
        await this.handleModelInput(chatId, text);
        break;
      case UserState.ADDING_PRESET_BACKGROUND:
        await this.handleBackgroundInput(chatId, text);
        break;
      case UserState.ADDING_PRESET_PATTERN:
        await this.handlePatternInput(chatId, text);
        break;
      case UserState.EDITING_PRESET:
        await this.handlePresetEdit(chatId, text);
        break;
      case UserState.EDITING_PRESET_GIFT:
        await this.handleEditGiftInput(chatId, text);
        break;
      case UserState.EDITING_PRESET_MODEL:
        await this.handleEditModelInput(chatId, text);
        break;
      case UserState.EDITING_PRESET_BACKGROUND:
        await this.handleEditBackgroundInput(chatId, text);
        break;
      case UserState.EDITING_PRESET_PATTERN:
        await this.handleEditPatternInput(chatId, text);
        break;
      case UserState.SEARCHING_PRESETS:
        await this.handleSearchInput(chatId, text);
        break;
      default:
        await this.handleUnknownCommand(chatId, text);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞
  private async handleAddPreset(chatId: number): Promise<void> {
    this.sessionManager.updateState(chatId, UserState.ADDING_PRESET_GIFT);
    this.sessionManager.clearData(chatId);

    await this.bot.sendMessage(chatId, 
      'üéÅ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞</b>\n\n' +
      '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):',
      {
        parse_mode: 'HTML',
        reply_markup: cancelKeyboard
      }
    );
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞
  private async handleGiftNameInput(chatId: number, text: string): Promise<void> {
    const validation = InputValidator.validateGiftName(text);
    if (!validation.isValid) {
      await this.bot.sendMessage(chatId, validation.error!, {
        reply_markup: cancelKeyboard
      });
      return;
    }

    this.sessionManager.setData(chatId, 'gift_name', text.trim());
    this.sessionManager.updateState(chatId, UserState.ADDING_PRESET_MODEL);

    await this.bot.sendMessage(chatId,
      'üé≠ <b>–ú–æ–¥–µ–ª—å –ø–æ–¥–∞—Ä–∫–∞</b>\n\n' +
      '–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –ø–æ–¥–∞—Ä–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":',
      {
        parse_mode: 'HTML',
        reply_markup: skipKeyboard
      }
    );
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–æ–¥–µ–ª–∏
  private async handleModelInput(chatId: number, text: string): Promise<void> {
    if (text === '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
      this.sessionManager.setData(chatId, 'model', null);
    } else {
      const validation = InputValidator.validateModel(text);
      if (!validation.isValid) {
        await this.bot.sendMessage(chatId, validation.error!, {
          reply_markup: skipKeyboard
        });
        return;
      }
      this.sessionManager.setData(chatId, 'model', text.trim());
    }

    this.sessionManager.updateState(chatId, UserState.ADDING_PRESET_BACKGROUND);

    await this.bot.sendMessage(chatId,
      'üñºÔ∏è <b>–§–æ–Ω –ø–æ–¥–∞—Ä–∫–∞</b>\n\n' +
      '–í–≤–µ–¥–∏—Ç–µ —Ñ–æ–Ω –ø–æ–¥–∞—Ä–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":',
      {
        parse_mode: 'HTML',
        reply_markup: skipKeyboard
      }
    );
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ñ–æ–Ω–∞
  private async handleBackgroundInput(chatId: number, text: string): Promise<void> {
    if (text === '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
      this.sessionManager.setData(chatId, 'background', null);
    } else {
      const validation = InputValidator.validateBackground(text);
      if (!validation.isValid) {
        await this.bot.sendMessage(chatId, validation.error!, {
          reply_markup: skipKeyboard
        });
        return;
      }
      this.sessionManager.setData(chatId, 'background', text.trim());
    }

    this.sessionManager.updateState(chatId, UserState.ADDING_PRESET_PATTERN);

    await this.bot.sendMessage(chatId,
      'üé® <b>–£–∑–æ—Ä –ø–æ–¥–∞—Ä–∫–∞</b>\n\n' +
      '–í–≤–µ–¥–∏—Ç–µ —É–∑–æ—Ä –ø–æ–¥–∞—Ä–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":',
      {
        parse_mode: 'HTML',
        reply_markup: skipKeyboard
      }
    );
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —É–∑–æ—Ä–∞
  private async handlePatternInput(chatId: number, text: string): Promise<void> {
    if (text === '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
      this.sessionManager.setData(chatId, 'pattern', null);
    } else {
      const validation = InputValidator.validatePattern(text);
      if (!validation.isValid) {
        await this.bot.sendMessage(chatId, validation.error!, {
          reply_markup: skipKeyboard
        });
        return;
      }
      this.sessionManager.setData(chatId, 'pattern', text.trim());
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ—Å–µ—Ç
    await this.createPreset(chatId);
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
  private async createPreset(chatId: number): Promise<void> {
    try {
      const session = this.sessionManager.getSession(chatId);
      const presetData = {
        user_id: chatId,
        gift_name: session.data.gift_name,
        model: session.data.model,
        background: session.data.background,
        pattern: session.data.pattern,
        is_active: true
      };

      const preset = await this.presetModel.create(presetData);
      this.sessionManager.resetSession(chatId);

      const successMessage = MessageFormatter.formatPresetCreated(preset);
      await this.bot.sendMessage(chatId, successMessage, {
        parse_mode: 'HTML',
        reply_markup: mainMenu
      });
    } catch (error) {
      console.error('Error creating preset:', error);
      await this.bot.sendMessage(chatId, MessageFormatter.formatError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç'));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤
  private async handleMyPresets(chatId: number): Promise<void> {
    try {
      const presets = await this.presetModel.getByUserId(chatId);
      const displayData = presets.map(preset => this.convertToPresetDisplayData(preset));

      const message = MessageFormatter.formatPresetsList(displayData);
      const keyboard = presets.length > 0 
        ? { inline_keyboard: presets.slice(0, 5).map(preset => [
            {
              text: `${preset.is_active ? 'üü¢' : 'üî¥'} ${preset.gift_name}`,
              callback_data: JSON.stringify({ action: 'view_preset', presetId: preset.id })
            }
          ]) }
        : undefined;

      await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: keyboard || mainMenu
      });
    } catch (error) {
      console.error('Error getting presets:', error);
      await this.bot.sendMessage(chatId, MessageFormatter.formatError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤'));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–π—á–∞—Å
  private async handleCheckNow(chatId: number): Promise<void> {
    try {
      const presets = await this.presetModel.getActiveByUserId(chatId);
      
      if (presets.length === 0) {
        await this.bot.sendMessage(chatId, 
          '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n' +
          '–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ—Å–µ—Ç, –≤—ã–±—Ä–∞–≤ "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Å–µ—Ç" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.',
          { reply_markup: mainMenu }
        );
        return;
      }

      await this.bot.sendMessage(chatId, 
        `üîç –ü—Ä–æ–≤–µ—Ä—è—é ${presets.length} –ø—Ä–µ—Å–µ—Ç–æ–≤...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...`
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
      for (const preset of presets) {
        try {
          const result = await this.parserService.searchGifts({
            gift_name: preset.gift_name,
            model: preset.model || undefined,
            background: preset.background || undefined,
            pattern: preset.pattern || undefined
          });

          const resultMessage = MessageFormatter.formatCheckResult(preset, result.count);
          await this.bot.sendMessage(chatId, resultMessage, {
            parse_mode: 'HTML'
          });
        } catch (error) {
          console.error(`Error checking preset ${preset.id}:`, error);
          await this.bot.sendMessage(chatId, 
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ—Å–µ—Ç–∞ "${preset.gift_name}"`
          );
        }
      }

      await this.bot.sendMessage(chatId, 
        '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
        { reply_markup: mainMenu }
      );
    } catch (error) {
      console.error('Error during check:', error);
      await this.bot.sendMessage(chatId, MessageFormatter.formatError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É'));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤
  private async handleSearchPresets(chatId: number): Promise<void> {
    try {
      const presets = await this.presetModel.getByUserId(chatId);
      const displayData = presets.map(preset => this.convertToPresetDisplayData(preset));

      const message = MessageFormatter.formatPresetsList(displayData, 0, 5, '–ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Å–µ—Ç–æ–≤');
      const keyboard = presetsListKeyboard(displayData, 0, 5);

      await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('Error showing search presets:', error);
      await this.bot.sendMessage(chatId, MessageFormatter.formatError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ—Å–µ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞'));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  private async handleSettings(chatId: number): Promise<void> {
    const settingsMessage = 
      '‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n' +
      'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª—é—á–µ–Ω—ã\n' +
      '‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n' +
      'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –¥–æ—Å—Ç—É–ø–Ω–∞\n\n' +
      '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.';

    await this.bot.sendMessage(chatId, settingsMessage, {
      parse_mode: 'HTML',
      reply_markup: mainMenu
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞
  private async handlePresetEdit(chatId: number, _text: string): Promise<void> {
    // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
    await this.bot.sendMessage(chatId, '–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  private async handleEditGiftInput(chatId: number, text: string): Promise<void> {
    const validation = InputValidator.validateGiftName(text);
    if (!validation.isValid) {
      await this.bot.sendMessage(chatId, validation.error!, {
        reply_markup: cancelKeyboard
      });
      return;
    }

    try {
      const session = this.sessionManager.getSession(chatId);
      const presetId = session.data.editing_preset_id;
      
      await this.presetModel.update(presetId, { gift_name: text.trim() });
      this.sessionManager.resetSession(chatId);

      const successMessage = `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: <b>${text.trim()}</b>`;
      await this.bot.sendMessage(chatId, successMessage, {
        parse_mode: 'HTML',
        reply_markup: mainMenu
      });
    } catch (error) {
      console.error('Error updating gift name:', error);
      await this.bot.sendMessage(chatId, MessageFormatter.formatError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞'));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  private async handleEditModelInput(chatId: number, text: string): Promise<void> {
    let newModel: string | null = null;
    
    if (text.toLowerCase() === '—É–¥–∞–ª–∏—Ç—å') {
      newModel = null;
    } else {
      const validation = InputValidator.validateModel(text);
      if (!validation.isValid) {
        await this.bot.sendMessage(chatId, validation.error!, {
          reply_markup: cancelKeyboard
        });
        return;
      }
      newModel = text.trim();
    }

    try {
      const session = this.sessionManager.getSession(chatId);
      const presetId = session.data.editing_preset_id;
      
      await this.presetModel.update(presetId, { model: newModel || undefined });
      this.sessionManager.resetSession(chatId);

      const successMessage = newModel 
        ? `‚úÖ –ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: <b>${newModel}</b>`
        : `‚úÖ –ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞`;
      await this.bot.sendMessage(chatId, successMessage, {
        parse_mode: 'HTML',
        reply_markup: mainMenu
      });
    } catch (error) {
      console.error('Error updating model:', error);
      await this.bot.sendMessage(chatId, MessageFormatter.formatError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å'));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  private async handleEditBackgroundInput(chatId: number, text: string): Promise<void> {
    let newBackground: string | null = null;
    
    if (text.toLowerCase() === '—É–¥–∞–ª–∏—Ç—å') {
      newBackground = null;
    } else {
      const validation = InputValidator.validateBackground(text);
      if (!validation.isValid) {
        await this.bot.sendMessage(chatId, validation.error!, {
          reply_markup: cancelKeyboard
        });
        return;
      }
      newBackground = text.trim();
    }

    try {
      const session = this.sessionManager.getSession(chatId);
      const presetId = session.data.editing_preset_id;
      
      await this.presetModel.update(presetId, { background: newBackground || undefined });
      this.sessionManager.resetSession(chatId);

      const successMessage = newBackground 
        ? `‚úÖ –§–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: <b>${newBackground}</b>`
        : `‚úÖ –§–æ–Ω —É–¥–∞–ª–µ–Ω`;
      await this.bot.sendMessage(chatId, successMessage, {
        parse_mode: 'HTML',
        reply_markup: mainMenu
      });
    } catch (error) {
      console.error('Error updating background:', error);
      await this.bot.sendMessage(chatId, MessageFormatter.formatError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω'));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —É–∑–æ—Ä–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  private async handleEditPatternInput(chatId: number, text: string): Promise<void> {
    let newPattern: string | null = null;
    
    if (text.toLowerCase() === '—É–¥–∞–ª–∏—Ç—å') {
      newPattern = null;
    } else {
      const validation = InputValidator.validatePattern(text);
      if (!validation.isValid) {
        await this.bot.sendMessage(chatId, validation.error!, {
          reply_markup: cancelKeyboard
        });
        return;
      }
      newPattern = text.trim();
    }

    try {
      const session = this.sessionManager.getSession(chatId);
      const presetId = session.data.editing_preset_id;
      
      await this.presetModel.update(presetId, { pattern: newPattern || undefined });
      this.sessionManager.resetSession(chatId);

      const successMessage = newPattern 
        ? `‚úÖ –£–∑–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: <b>${newPattern}</b>`
        : `‚úÖ –£–∑–æ—Ä —É–¥–∞–ª–µ–Ω`;
      await this.bot.sendMessage(chatId, successMessage, {
        parse_mode: 'HTML',
        reply_markup: mainMenu
      });
    } catch (error) {
      console.error('Error updating pattern:', error);
      await this.bot.sendMessage(chatId, MessageFormatter.formatError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —É–∑–æ—Ä'));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤
  private async handleSearchInput(chatId: number, text: string): Promise<void> {
    try {
      const presets = await this.presetModel.findByCriteria({ gift_name: text.trim() });
      const displayData = presets.map(preset => this.convertToPresetDisplayData(preset));

      if (presets.length === 0) {
        await this.bot.sendMessage(chatId, 
          `üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "<b>${text.trim()}</b>" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n` +
          `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.`,
          {
            parse_mode: 'HTML',
            reply_markup: mainMenu
          }
        );
        return;
      }

      const message = MessageFormatter.formatPresetsList(displayData, 0, 5, `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${text.trim()}"`);
      const keyboard = presetsListKeyboard(displayData, 0, 5);

      await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: keyboard
      });

      this.sessionManager.resetSession(chatId);
    } catch (error) {
      console.error('Error searching presets:', error);
      await this.bot.sendMessage(chatId, MessageFormatter.formatError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ—Å–µ—Ç–æ–≤'));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /monitoring
  public async handleMonitoring(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;

    if (!this.monitoringService) {
      await this.bot.sendMessage(chatId, '‚ùå –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    try {
      const stats = this.monitoringService.getStats();
      const message = MessageFormatter.formatMonitoringStats(stats);
      
      await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: mainMenu
      });
    } catch (error) {
      console.error('Error getting monitoring stats:', error);
      await this.bot.sendMessage(chatId, MessageFormatter.formatError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞'));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /monitoring_start
  public async handleMonitoringStart(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;

    if (!this.monitoringService) {
      await this.bot.sendMessage(chatId, '‚ùå –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    try {
      await this.monitoringService.start();
      await this.bot.sendMessage(chatId, '‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω', {
        reply_markup: mainMenu
      });
    } catch (error) {
      console.error('Error starting monitoring:', error);
      await this.bot.sendMessage(chatId, MessageFormatter.formatError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞'));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /monitoring_stop
  public async handleMonitoringStop(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;

    if (!this.monitoringService) {
      await this.bot.sendMessage(chatId, '‚ùå –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    try {
      await this.monitoringService.stop();
      await this.bot.sendMessage(chatId, '‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', {
        reply_markup: mainMenu
      });
    } catch (error) {
      console.error('Error stopping monitoring:', error);
      await this.bot.sendMessage(chatId, MessageFormatter.formatError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞'));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /monitoring_check
  public async handleMonitoringCheck(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;

    if (!this.monitoringService) {
      await this.bot.sendMessage(chatId, '‚ùå –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    try {
      await this.bot.sendMessage(chatId, 'üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...');
      await this.monitoringService.performMonitoringCycle();
      await this.bot.sendMessage(chatId, '‚úÖ –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
        reply_markup: mainMenu
      });
    } catch (error) {
      console.error('Error performing manual check:', error);
      await this.bot.sendMessage(chatId, MessageFormatter.formatError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏'));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
  public async handleMonitoringButton(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;

    if (!this.monitoringService) {
      await this.bot.sendMessage(chatId, '‚ùå –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    try {
      const stats = this.monitoringService.getStats();
      const message = `üîÑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º*\n\n` +
                     `üìä *–°—Ç–∞—Ç—É—Å:* ${stats.isRunning ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n` +
                     `üìà *–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫:* ${stats.totalChecks}\n` +
                     `‚úÖ *–£—Å–ø–µ—à–Ω—ã—Ö:* ${stats.successfulChecks}\n` +
                     `‚ùå *–ù–µ—É–¥–∞—á–Ω—ã—Ö:* ${stats.failedChecks}\n` +
                     `üéØ *–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:* ${stats.totalChanges}\n` +
                     `‚è∞ *–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:* ${stats.lastCheck ? stats.lastCheck.toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'}\n\n` +
                     `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      const sentMessage = await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: monitoringKeyboard
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (sentMessage.message_id) {
        this.monitoringService.setStatsMessageId(chatId, sentMessage.message_id);
      }
    } catch (error) {
      console.error('Error showing monitoring menu:', error);
      await this.bot.sendMessage(chatId, MessageFormatter.formatError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞'));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
  private async handleUnknownCommand(chatId: number, _text: string): Promise<void> {
    await this.bot.sendMessage(chatId, 
      '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
      { reply_markup: mainMenu }
    );
  }
}
