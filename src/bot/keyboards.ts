import { ReplyKeyboardMarkup, InlineKeyboardMarkup } from 'node-telegram-bot-api';
import { CallbackQueryData } from '../types/bot';

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
export const mainMenu: ReplyKeyboardMarkup = {
  keyboard: [
    [
      { text: 'üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Å–µ—Ç' },
      { text: 'üìã –ú–æ–∏ –ø—Ä–µ—Å–µ—Ç—ã' }
    ],
    [
      { text: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å' },
      { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }
    ],
    [
      { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' },
      { text: '‚ÑπÔ∏è –ü–æ–º–æ—â—å' }
    ]
  ],
  resize_keyboard: true,
  one_time_keyboard: false,
  input_field_placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é'
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã
export const cancelKeyboard: ReplyKeyboardMarkup = {
  keyboard: [
    [{ text: '‚ùå –û—Ç–º–µ–Ω–∞' }]
  ],
  resize_keyboard: true,
  one_time_keyboard: true
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥
export const backKeyboard: ReplyKeyboardMarkup = {
  keyboard: [
    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
  ],
  resize_keyboard: true,
  one_time_keyboard: true
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
export const skipKeyboard: ReplyKeyboardMarkup = {
  keyboard: [
    [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' }],
    [{ text: '‚ùå –û—Ç–º–µ–Ω–∞' }]
  ],
  resize_keyboard: true,
  one_time_keyboard: true
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
export const confirmKeyboard: ReplyKeyboardMarkup = {
  keyboard: [
    [
      { text: '‚úÖ –î–∞' },
      { text: '‚ùå –ù–µ—Ç' }
    ],
    [{ text: '‚ùå –û—Ç–º–µ–Ω–∞' }]
  ],
  resize_keyboard: true,
  one_time_keyboard: true
};

// Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–µ—Å–µ—Ç–æ–º
export const presetActions = (presetId: number, isActive: boolean): InlineKeyboardMarkup => ({
  inline_keyboard: [
    [
      { 
        text: isActive ? '‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' : '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 
        callback_data: JSON.stringify({ action: 'toggle_preset', presetId })
      }
    ],
    [
      { 
        text: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å', 
        callback_data: JSON.stringify({ action: 'check_preset', presetId })
      },
      { 
        text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 
        callback_data: JSON.stringify({ action: 'edit_preset', presetId })
      }
    ],
    [
      { 
        text: 'üóë –£–¥–∞–ª–∏—Ç—å', 
        callback_data: JSON.stringify({ action: 'delete_preset', presetId })
      }
    ]
  ]
});

// Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
export const presetsListKeyboard = (
  presets: any[], 
  currentPage: number = 0, 
  pageSize: number = 5
): InlineKeyboardMarkup => {
  const totalPages = Math.ceil(presets.length / pageSize);
  const startIndex = currentPage * pageSize;
  const endIndex = startIndex + pageSize;
  const pagePresets = presets.slice(startIndex, endIndex);

  const keyboard = pagePresets.map(preset => [
    {
      text: `${preset.is_active ? 'üü¢' : 'üî¥'} ${preset.gift_name}`,
      callback_data: JSON.stringify({ action: 'view_preset', presetId: preset.id })
    }
  ]);

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const navigationButtons = [];
  if (totalPages > 1) {
    if (currentPage > 0) {
      navigationButtons.push({
        text: '‚¨ÖÔ∏è',
        callback_data: JSON.stringify({ action: 'prev_page', page: currentPage - 1 })
      });
    }
    
    navigationButtons.push({
      text: `${currentPage + 1}/${totalPages}`,
      callback_data: 'noop'
    });

    if (currentPage < totalPages - 1) {
      navigationButtons.push({
        text: '‚û°Ô∏è',
        callback_data: JSON.stringify({ action: 'next_page', page: currentPage + 1 })
      });
    }
  }

  if (navigationButtons.length > 0) {
    keyboard.push(navigationButtons);
  }

  // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
  keyboard.push([
    { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: JSON.stringify({ action: 'back_to_menu' }) }
  ]);

  return { inline_keyboard: keyboard };
};

// Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞
export const editPresetKeyboard = (presetId: number): InlineKeyboardMarkup => ({
  inline_keyboard: [
    [
      { text: 'üéÅ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫', callback_data: JSON.stringify({ action: 'edit_gift', presetId }) },
      { text: 'üé≠ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å', callback_data: JSON.stringify({ action: 'edit_model', presetId }) }
    ],
    [
      { text: 'üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω', callback_data: JSON.stringify({ action: 'edit_background', presetId }) },
      { text: 'üé® –ò–∑–º–µ–Ω–∏—Ç—å —É–∑–æ—Ä', callback_data: JSON.stringify({ action: 'edit_pattern', presetId }) }
    ],
    [
      { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: JSON.stringify({ action: 'back_to_presets' }) }
    ]
  ]
});

// Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
export const settingsKeyboard: InlineKeyboardMarkup = ({
  inline_keyboard: [
    [
      { text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: JSON.stringify({ action: 'notification_settings' }) },
      { text: '‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏', callback_data: JSON.stringify({ action: 'check_interval' }) }
    ],
    [
      { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: JSON.stringify({ action: 'view_stats' }) },
      { text: 'üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: JSON.stringify({ action: 'clear_data' }) }
    ],
    [
      { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: JSON.stringify({ action: 'back_to_menu' }) }
    ]
  ]
});

// Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
export const confirmDeleteKeyboard = (presetId: number): InlineKeyboardMarkup => ({
  inline_keyboard: [
    [
      { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: JSON.stringify({ action: 'confirm_delete', presetId }) },
      { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: JSON.stringify({ action: 'cancel_delete' }) }
    ]
  ]
});

// Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
export const checkResultsKeyboard = (presetId: number): InlineKeyboardMarkup => ({
  inline_keyboard: [
    [
      { text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑', callback_data: JSON.stringify({ action: 'check_preset', presetId }) },
      { text: 'üìä –ò—Å—Ç–æ—Ä–∏—è', callback_data: JSON.stringify({ action: 'view_history', presetId }) }
    ],
    [
      { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: JSON.stringify({ action: 'back_to_presets' }) }
    ]
  ]
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data
export const parseCallbackData = (data: string): CallbackQueryData => {
  try {
    return JSON.parse(data);
  } catch {
    return { action: data };
  }
};
