import dotenv from 'dotenv';
import { Database } from './database/database';
import { PresetModel } from './database/models/preset.model';
import { ParserService } from './services/parser-service';
import { MonitoringService } from './services/monitoring-service';
import { TelegramBotService } from './bot/telegram-bot';
import { BotConfig } from './types/bot';
import { MonitoringConfig } from './types/monitoring';
import { createParserConfig } from './config/parser-config';
import * as fs from 'fs';
import * as path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
async function checkAndKillDuplicateProcesses(): Promise<void> {
  // –ö–ª–∞–¥–µ–º PID —Ä—è–¥–æ–º —Å –ë–î, —á—Ç–æ–±—ã PM2 cwd –Ω–µ –≤–ª–∏—è–ª
  const rawDbPath = process.env.DATABASE_PATH || './data/gifts-monitor.db';
  const resolvedDbPath = path.isAbsolute(rawDbPath) ? rawDbPath : path.resolve(process.cwd(), rawDbPath);
  const pidFile = path.join(path.dirname(resolvedDbPath), 'bot.pid');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª PID
    if (fs.existsSync(pidFile)) {
      const existingPid = fs.readFileSync(pidFile, 'utf8').trim();
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —ç—Ç–∏–º PID
        process.kill(parseInt(existingPid), 0);
        console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ (PID: ${existingPid}). –ó–∞–≤–µ—Ä—à–∞–µ–º –µ–≥–æ...`);
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        process.kill(parseInt(existingPid), 'SIGTERM');
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
        try {
          process.kill(parseInt(existingPid), 0);
          // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –ø—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
          process.kill(parseInt(existingPid), 'SIGKILL');
          console.log(`üî¥ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å ${existingPid}`);
        } catch (e) {
          console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${existingPid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω`);
        }
      } catch (e) {
        // –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª PID
        console.log(`‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å ${existingPid} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª PID`);
        fs.unlinkSync(pidFile);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª PID
    fs.writeFileSync(pidFile, process.pid.toString());
    console.log(`üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª PID: ${process.pid}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–∞ PID –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
function cleanupPidFile(): void {
  const rawDbPath = process.env.DATABASE_PATH || './data/gifts-monitor.db';
  const resolvedDbPath = path.isAbsolute(rawDbPath) ? rawDbPath : path.resolve(process.cwd(), rawDbPath);
  const pidFile = path.join(path.dirname(resolvedDbPath), 'bot.pid');
  try {
    if (fs.existsSync(pidFile)) {
      fs.unlinkSync(pidFile);
      console.log('üßπ –§–∞–π–ª PID –æ—á–∏—â–µ–Ω');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–∞ PID:', error);
  }
}

async function main() {
  try {
    console.log('üöÄ Starting Gifts Monitor Bot...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    await checkAndKillDuplicateProcesses();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    if (!botToken) {
      throw new Error('TELEGRAM_BOT_TOKEN is not set in environment variables');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
    if (!botToken.match(/^\d+:[A-Za-z0-9_-]+$/)) {
      throw new Error('TELEGRAM_BOT_TOKEN has invalid format. Expected format: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz');
    }

    console.log(`ü§ñ Bot token: ${botToken.substring(0, 10)}...`);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
    console.log('üìä Initializing database...');
    const rawDbPath = process.env.DATABASE_PATH || './data/gifts-monitor.db';
    const dbPath = path.isAbsolute(rawDbPath) ? rawDbPath : path.resolve(process.cwd(), rawDbPath);
    const dbDir = path.dirname(dbPath);
    try {
      fs.mkdirSync(dbDir, { recursive: true });
    } catch (e) {
      console.error('‚ùå Failed to create database directory:', dbDir, e);
      throw e;
    }
    console.log(`üóÑÔ∏è Database path: ${dbPath}`);
    const database = new Database({ path: dbPath });
    await database.initialize();

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª–∏
    const presetModel = new PresetModel(database.getConnection());

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–µ—Ä–∞
    console.log('üîç Initializing parser service...');
    const parserConfig = createParserConfig();
    const parserService = new ParserService(parserConfig, database);
    await parserService.initialize();

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
    const botConfig: BotConfig = {
      token: botToken,
      polling: true
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    console.log('üîç Testing Telegram API connectivity...');
    try {
      const testResponse = await fetch(`https://api.telegram.org/bot${botToken}/getMe`);
      if (!testResponse.ok) {
        throw new Error(`Telegram API test failed: ${testResponse.status} ${testResponse.statusText}`);
      }
      const testData = await testResponse.json();
      if (!testData.ok) {
        throw new Error(`Telegram API error: ${testData.description}`);
      }
      console.log('‚úÖ Telegram API is accessible');
    } catch (error) {
      console.error('‚ùå Telegram API test failed:', error);
      console.error('This might indicate network connectivity issues.');
      throw error;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    const monitoringConfig: MonitoringConfig = {
      enabled: process.env.MONITORING_ENABLED === 'true', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω
      cronExpression: process.env.MONITORING_CRON || '*/1 * * * *', // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
      checkIntervalMinutes: parseInt(process.env.MONITORING_INTERVAL || '1'),
      retryAttempts: parseInt(process.env.MONITORING_RETRY_ATTEMPTS || '3'),
      retryDelayMs: parseInt(process.env.MONITORING_RETRY_DELAY || '1000')
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    console.log('ü§ñ Initializing Telegram bot...');
    const bot = new TelegramBotService(botConfig, presetModel, parserService);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è –±–æ—Ç–∞
    process.on('unhandledRejection', (reason, promise) => {
      if (reason && typeof reason === 'object' && 'code' in reason && reason.code === 'EFATAL') {
        console.error('‚ùå Fatal network error detected. This might be due to:');
        console.error('   - Network connectivity issues');
        console.error('   - Telegram API temporary unavailability');
        console.error('   - Firewall blocking requests');
        console.error('   - DNS resolution problems');
        console.error('   - Proxy configuration issues');
        console.error('   - Rate limiting by Telegram');
        console.error('');
        console.error('üí° Try the following solutions:');
        console.error('   1. Check your internet connection');
        console.error('   2. Wait a few minutes and try again');
        console.error('   3. Check if Telegram API is accessible: https://api.telegram.org');
        console.error('   4. Verify your bot token is correct');
        console.error('   5. Check firewall/proxy settings');
      }
      console.error('Unhandled Rejection at:', promise, 'reason:', reason);
    });

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–æ–ª–µ –¥–æ—Å—Ç—É–ø–∞
    console.log('üîê Access control status:');
    console.log(`   - Enabled: ${bot.isAccessControlEnabled()}`);
    console.log(`   - Allowed users: ${bot.getAllowedUsers().join(', ')}`);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    console.log('üìä Initializing monitoring service...');
    const monitoringService = new MonitoringService(database, parserService, bot, monitoringConfig);
    await monitoringService.initialize();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ—Ç–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    bot.setMonitoringService(monitoringService);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.start();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
    if (monitoringConfig.enabled) {
      console.log('üîÑ Starting monitoring service...');
      await monitoringService.start();
    } else {
      console.log('‚ö†Ô∏è Monitoring is disabled');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    process.on('SIGINT', async () => {
      console.log('\nüõë Received SIGINT, shutting down gracefully...');
      cleanupPidFile();
      await monitoringService.cleanup();
      await bot.stop();
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      console.log('\nüõë Received SIGTERM, shutting down gracefully...');
      cleanupPidFile();
      await monitoringService.cleanup();
      await bot.stop();
      process.exit(0);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    process.on('unhandledRejection', (reason, promise) => {
      console.error('Unhandled Rejection at:', promise, 'reason:', reason);
    });

    process.on('uncaughtException', (error) => {
      console.error('Uncaught Exception:', error);
      process.exit(1);
    });

    console.log('‚úÖ Bot is running successfully!');
    console.log('Press Ctrl+C to stop the bot');

  } catch (error) {
    console.error('‚ùå Failed to start bot:', error);
    cleanupPidFile();
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
main().catch((error) => {
  console.error('Fatal error:', error);
  cleanupPidFile();
  process.exit(1);
});
