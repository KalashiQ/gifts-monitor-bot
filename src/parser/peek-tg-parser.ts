import { chromium, Browser, Page } from 'playwright';
import { ParserConfig, SearchCriteria, SearchResult, GiftItem, ParserError, ParserStats } from '../types/parser';

export class PeekTgParser {
  private browser: Browser | null = null;
  private config: ParserConfig;
  private stats: ParserStats;

  constructor(config: ParserConfig) {
    this.config = config;
    this.stats = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      averageResponseTime: 0
    };
  }

  public async initialize(): Promise<void> {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Playwright –±—Ä–∞—É–∑–µ—Ä–∞...');
      this.browser = await chromium.launch({
        headless: this.config.headless,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
      });
      console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä: ${error}`);
    }
  }

  public async close(): Promise<void> {
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
      console.log('üîå –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    }
  }

  public async searchGifts(criteria: SearchCriteria): Promise<SearchResult> {
    if (!this.browser) {
      throw new Error('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.');
    }

    const startTime = Date.now();
    this.stats.totalRequests++;

    try {
      console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–¥–∞—Ä–∫–æ–≤: ${criteria.gift_name}${criteria.model ? ` (${criteria.model})` : ''}`);
      
      const page = await this.browser.newPage();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await this.setupPage(page);
      
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç
      await page.goto(this.config.baseUrl, { 
        waitUntil: 'networkidle',
        timeout: this.config.timeout 
      });

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
      const result = await this.performSearch(page, criteria);
      
      await page.close();

      const responseTime = Date.now() - startTime;
      this.updateStats(true, responseTime);

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.count} –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞ ${responseTime}ms`);
      return result;

    } catch (error) {
      const responseTime = Date.now() - startTime;
      this.updateStats(false, responseTime);
      
      const parserError: ParserError = {
        message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        code: 'SEARCH_FAILED',
        timestamp: new Date()
      };

      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', parserError.message);
      throw parserError;
    }
  }

  public async searchGiftsWithRetry(criteria: SearchCriteria): Promise<SearchResult> {
    let lastError: ParserError | null = null;

    for (let attempt = 1; attempt <= this.config.retryAttempts; attempt++) {
      try {
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.config.retryAttempts}`);
        return await this.searchGifts(criteria);
      } catch (error) {
        lastError = error as ParserError;
        lastError.retryCount = attempt;

        if (attempt < this.config.retryAttempts) {
          console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${this.config.retryDelay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
          await this.delay(this.config.retryDelay);
        }
      }
    }

    throw lastError || new Error('–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã');
  }

  private async setupPage(page: Page): Promise<void> {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ User-Agent
    if (this.config.userAgent) {
      await page.setExtraHTTPHeaders({
        'User-Agent': this.config.userAgent
      });
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ viewport
    await page.setViewportSize({ width: 1920, height: 1080 });

    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    await page.route('**/*', (route) => {
      const resourceType = route.request().resourceType();
      if (['image', 'font', 'media'].includes(resourceType)) {
        route.abort();
      } else {
        route.continue();
      }
    });
  }

  private async performSearch(page: Page, criteria: SearchCriteria): Promise<SearchResult> {
    try {
      // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      await page.waitForSelector('input, select, button', { timeout: 10000 });

      // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞
      await this.fillSearchForm(page, criteria);

      // –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
      await this.clickSearchButton(page);

      // –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await this.waitForResults(page);

      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      const result = await this.extractSearchResults(page, criteria);

      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞:', error);
      throw error;
    }
  }

  private async fillSearchForm(page: Page, criteria: SearchCriteria): Promise<void> {
    console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞...');


    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    await this.selectDropdownValue(page, '–ü–æ–¥–∞—Ä–æ–∫', criteria.gift_name, [
      // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      'button:has-text("All gifts")',
      'button[aria-haspopup="listbox"]:has-text("All gifts")',
      'button[type="button"]:has-text("All gifts")',
      'div:has(label:has-text("Gift")) button[type="button"]',
      'div:has(label:has-text("Gift")) button',
      // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –∫–ª–∞—Å—Å–∞–º –∏–∑ HTML
      'button[class*="relative"]:has-text("All gifts")',
      'button[class*="flex"]:has-text("All gifts")',
      'button[class*="w-full"]:has-text("All gifts")',
      // –°–µ–ª–µ–∫—Ç–æ—Ä –ø–æ span –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
      'button:has(span:has-text("All gifts"))'
    ]);

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if (criteria.model) {
      await this.selectDropdownValue(page, '–ö–æ–ª–ª–µ–∫—Ü–∏—è', criteria.model, [
        'button:has-text("All models")',
        'button[aria-haspopup="listbox"]:has-text("All models")',
        'button[type="button"]:has-text("All models")',
        'div:has(label:has-text("Model")) button[type="button"]',
        'div:has(label:has-text("Model")) button',
        'button[class*="relative"]:has-text("All models")',
        'button[class*="flex"]:has-text("All models")',
        'button[class*="w-full"]:has-text("All models")',
        'button:has(span:has-text("All models"))'
      ]);
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (criteria.background) {
      await this.selectDropdownValue(page, '–§–æ–Ω', criteria.background, [
        'button:has-text("All backgrounds")',
        'button[aria-haspopup="listbox"]:has-text("All backgrounds")',
        'button[type="button"]:has-text("All backgrounds")',
        'div:has(label:has-text("Background")) button[type="button"]',
        'div:has(label:has-text("Background")) button',
        'button[class*="relative"]:has-text("All backgrounds")',
        'button[class*="flex"]:has-text("All backgrounds")',
        'button[class*="w-full"]:has-text("All backgrounds")',
        'button:has(span:has-text("All backgrounds"))'
      ]);
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∑–æ—Ä–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (criteria.pattern) {
      await this.selectDropdownValue(page, '–£–∑–æ—Ä', criteria.pattern, [
        'button:has-text("All patterns")',
        'button[aria-haspopup="listbox"]:has-text("All patterns")',
        'button[type="button"]:has-text("All patterns")',
        'div:has(label:has-text("Pattern")) button[type="button"]',
        'div:has(label:has-text("Pattern")) button',
        'button[class*="relative"]:has-text("All patterns")',
        'button[class*="flex"]:has-text("All patterns")',
        'button[class*="w-full"]:has-text("All patterns")',
        'button:has(span:has-text("All patterns"))'
      ]);
    }
  }

  private async selectDropdownValue(page: Page, fieldName: string, value: string, buttonSelectors: string[]): Promise<void> {
    console.log(`  üîç –í—ã–±–æ—Ä ${fieldName}: ${value}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É dropdown
    let dropdownButton = null;
    for (const selector of buttonSelectors) {
      try {
        dropdownButton = await page.$(selector);
        if (dropdownButton) {
          console.log(`    ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ ${fieldName}: ${selector}`);
          break;
        }
      } catch (error) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
      }
    }

    if (!dropdownButton) {
      console.log(`    ‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ ${fieldName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return;
    }

    try {
      // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É dropdown
      await dropdownButton.click();
      console.log(`    ‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ${fieldName}`);
      
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
      await page.waitForTimeout(1000);
      
      // –ò—â–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ –≤–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ
      const searchInputSelectors = [
        'input[placeholder="Search..."]',
        'input[type="text"][placeholder="Search..."]',
        'div[role="listbox"] input[placeholder="Search..."]',
        'input[class*="bg-gray-700"]'
      ];
      
      let searchInput = null;
      for (const selector of searchInputSelectors) {
        try {
          searchInput = await page.$(selector);
          if (searchInput) {
            console.log(`    ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è ${fieldName} —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
            break;
          }
        } catch (error) {
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
        }
      }
      
      if (searchInput) {
        console.log(`    ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è ${fieldName}`);
        await searchInput.fill(value);
        console.log(`    ‚úÖ –í–≤–µ–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: ${value}`);
        
        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        await page.waitForTimeout(1500);
        
        // –ò—â–µ–º –æ–ø—Ü–∏—é —Å –Ω—É–∂–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
        const optionSelectors = [
          `[role="option"]:has-text("${value}")`,
          `div[role="option"]:has-text("${value}")`,
          `div:has-text("${value}"):has([role="option"])`,
          `div[class*="cursor-pointer"]:has-text("${value}")`
        ];

        let optionFound = false;
        for (const optionSelector of optionSelectors) {
          try {
            const option = await page.$(optionSelector);
            if (option) {
              await option.click();
              console.log(`    ‚úÖ –í—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è ${fieldName}: ${value}`);
              optionFound = true;
              break;
            }
          } catch (error) {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
          }
        }

        if (!optionFound) {
          console.log(`    ‚ö†Ô∏è –û–ø—Ü–∏—è "${value}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ ${fieldName}`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          const allOptions = await page.$$('[role="option"], div[class*="cursor-pointer"]');
          console.log(`    üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏ –≤ ${fieldName}:`);
          for (let i = 0; i < Math.min(allOptions.length, 5); i++) {
            const text = await allOptions[i].textContent();
            if (text && text.trim()) {
              console.log(`      - "${text.trim()}"`);
            }
          }
        }
      } else {
        console.log(`    ‚ö†Ô∏è –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è ${fieldName}`);
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown, –∫–ª–∏–∫–Ω—É–≤ –≤–Ω–µ –µ–≥–æ
      await page.click('body');
      await page.waitForTimeout(500);

    } catch (error) {
      console.log(`    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ ${fieldName}:`, error);
    }
  }


  private async clickSearchButton(page: Page): Promise<void> {
    console.log('üîç –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞...');

    const searchButtonSelectors = [
      'button:has-text("–ù–∞–π—Ç–∏")',
      'button:has-text("Find")',
      'button:has-text("Search")',
      'button[type="submit"]',
      '[data-testid*="search" i]',
      'button[class*="search" i]'
    ];

    for (const selector of searchButtonSelectors) {
      try {
        const button = await page.$(selector);
        if (button) {
          await button.click();
          console.log('  ‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–∞—Ç–∞');
          return;
        }
      } catch (error) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
      }
    }

    throw new Error('–ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  private async waitForResults(page: Page): Promise<void> {
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...');

    // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const resultSelectors = [
      // –¢–æ—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      'span.font-medium.text-white',
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      'text=/–ù–∞–π–¥–µ–Ω–æ:\\s*\\d+/i',
      'text=/Found:\\s*\\d+/i',
      '[class*="result" i]',
      '[data-testid*="result" i]',
      'text="–ù–∞–π–¥–µ–Ω–æ"',
      'text="Found"',
      '[class*="gift" i]',
      '[class*="item" i]'
    ];

    for (const selector of resultSelectors) {
      try {
        await page.waitForSelector(selector, { timeout: 10000 });
        console.log(`  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã (—Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector})`);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        await page.waitForTimeout(1000);
        return;
      } catch (error) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
      }
    }

    console.log('  ‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
  }

  private async extractSearchResults(page: Page, criteria: SearchCriteria): Promise<SearchResult> {
    console.log('üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...');

    try {

      // –ü–æ–∏—Å–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
      const count = await this.extractCount(page);
      
      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
      const items = await this.extractGiftItems(page);

      const result: SearchResult = {
        count,
        items,
        searchCriteria: criteria,
        timestamp: new Date()
      };

      console.log(`  ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${count} –ø–æ–¥–∞—Ä–∫–æ–≤, ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      throw error;
    }
  }



  private async extractCount(page: Page): Promise<number> {
    console.log('  üîç –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');

    // –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É (—Å–∞–º—ã–π —á–∞—Å—Ç—ã–π —Å–ª—É—á–∞–π)
    try {
      const element = await page.$('span.font-medium.text-white');
      if (element) {
        const text = await element.textContent();
        if (text) {
          const match = text.match(/[\d,]+/);
          if (match) {
            // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –ø–∞—Ä—Å–∏–º —á–∏—Å–ª–æ
            const cleanNumber = match[0].replace(/,/g, '');
            const count = parseInt(cleanNumber, 10);
            console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ "span.font-medium.text-white": ${count} (—Ç–µ–∫—Å—Ç: "${text}")`);
            return count;
          }
        }
      }
    } catch (error) {
      console.log('  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ span.font-medium.text-white');
    }

    // –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É "–ù–∞–π–¥–µ–Ω–æ: X"
    try {
      const foundText = await page.textContent('text=/–ù–∞–π–¥–µ–Ω–æ:\\s*[\\d,]+/i');
      if (foundText) {
        const match = foundText.match(/–ù–∞–π–¥–µ–Ω–æ:\s*([\d,]+)/i);
        if (match) {
          // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –ø–∞—Ä—Å–∏–º —á–∏—Å–ª–æ
          const cleanNumber = match[1].replace(/,/g, '');
          const count = parseInt(cleanNumber, 10);
          console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ "–ù–∞–π–¥–µ–Ω–æ: X": ${count}`);
          return count;
        }
      }
    } catch (error) {
      console.log('  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç "–ù–∞–π–¥–µ–Ω–æ: X"');
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
    const countSelectors = [
      '[class*="count" i]',
      '[data-testid*="count" i]'
    ];

    for (const selector of countSelectors) {
      try {
        const element = await page.$(selector);
        if (element) {
          const text = await element.textContent();
          if (text) {
            const match = text.match(/[\d,]+/);
            if (match) {
              // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –ø–∞—Ä—Å–∏–º —á–∏—Å–ª–æ
              const cleanNumber = match[0].replace(/,/g, '');
              const count = parseInt(cleanNumber, 10);
              console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ "${selector}": ${count} (—Ç–µ–∫—Å—Ç: "${text}")`);
              return count;
            }
          }
        }
      } catch (error) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
      }
    }

    // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ —Å—á–∏—Ç–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤
    const itemSelectors = [
      'img[src*="gift"]',
      'img[alt*="gift" i]',
      '[class*="gift" i] img',
      '[class*="item" i] img'
    ];

    for (const selector of itemSelectors) {
      try {
        const elements = await page.$$(selector);
        if (elements.length > 0 && elements.length < 100) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º —á–∏—Å–ª–æ–º
          console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä "${selector}": ${elements.length}`);
          return elements.length;
        }
      } catch (error) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
      }
    }

    console.log('  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤');
    return 0;
  }

  private async extractGiftItems(page: Page): Promise<GiftItem[]> {
    const items: GiftItem[] = [];

    try {
      // –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏
      const itemSelectors = [
        '[class*="gift" i]',
        '[class*="item" i]',
        '[data-testid*="gift" i]'
      ];

      let elements: any[] = [];
      for (const selector of itemSelectors) {
        try {
          elements = await page.$$(selector);
          if (elements.length > 0) break;
        } catch (error) {
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
        }
      }

      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
      for (let i = 0; i < Math.min(elements.length, 10); i++) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        try {
          const item = await this.extractGiftItem(elements[i]);
          if (item) {
            items.push(item);
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ ${i}:`, error);
        }
      }

    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤:', error);
    }

    return items;
  }

  private async extractGiftItem(element: any): Promise<GiftItem | null> {
    try {
      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID
      const id = await element.getAttribute('data-id') || 
                 await element.getAttribute('id') || 
                 `item-${Date.now()}`;

      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
      const nameElement = await element.$('h1, h2, h3, [class*="name" i], [class*="title" i]');
      const name = nameElement ? await nameElement.textContent() : 'Unknown Gift';

      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const imgElement = await element.$('img');
      const imageUrl = imgElement ? await imgElement.getAttribute('src') : undefined;

      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
      const rarityElement = await element.$('[class*="rarity" i], [class*="percent" i]');
      const rarity = rarityElement ? await rarityElement.textContent() : undefined;

      return {
        id: id.trim(),
        name: name?.trim() || 'Unknown Gift',
        imageUrl,
        rarity
      };

    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞:', error);
      return null;
    }
  }

  private updateStats(success: boolean, responseTime: number): void {
    if (success) {
      this.stats.successfulRequests++;
    } else {
      this.stats.failedRequests++;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
    const totalTime = this.stats.averageResponseTime * (this.stats.successfulRequests - 1) + responseTime;
    this.stats.averageResponseTime = totalTime / this.stats.successfulRequests;
    this.stats.lastRequestTime = new Date();
  }

  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  public async getLastGiftLink(criteria: SearchCriteria): Promise<string | undefined> {
    if (!this.browser) {
      throw new Error('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.');
    }

    const startTime = Date.now();
    this.stats.totalRequests++;

    try {
      console.log(`üîó –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥–∞—Ä–æ–∫: ${criteria.gift_name}${criteria.model ? ` (${criteria.model})` : ''}`);
      
      const page = await this.browser.newPage();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await this.setupPage(page);
      
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç
      await page.goto(this.config.baseUrl, { 
        waitUntil: 'networkidle',
        timeout: this.config.timeout 
      });

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
      await this.performSearch(page, criteria);

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥–∞—Ä–æ–∫
      const lastGiftLink = await this.extractLastGiftLink(page);
      
      await page.close();

      const responseTime = Date.now() - startTime;
      this.updateStats(true, responseTime);

      console.log(`‚úÖ –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∑–∞ ${responseTime}ms${lastGiftLink ? `: ${lastGiftLink}` : ' (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞)'}`);
      return lastGiftLink;

    } catch (error) {
      const responseTime = Date.now() - startTime;
      this.updateStats(false, responseTime);
      
      const parserError: ParserError = {
        message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        code: 'LINK_EXTRACTION_FAILED',
        timestamp: new Date()
      };

      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:', parserError.message);
      throw parserError;
    }
  }

  public getStats(): ParserStats {
    return { ...this.stats };
  }

  public resetStats(): void {
    this.stats = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      averageResponseTime: 0
    };
  }

  private async extractLastGiftLink(page: Page): Promise<string | undefined> {
    console.log('  üîó –ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥–∞—Ä–æ–∫...');

    try {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥–ø–∏—Å–∫–∏
      await this.closeSubscriptionModal(page);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ JavaScript
      await page.evaluate(() => {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        const modals = document.querySelectorAll('[id*="modal"], [class*="modal"], [id*="subscribe"]');
        modals.forEach(modal => {
          if (modal instanceof HTMLElement) {
            modal.style.display = 'none';
            modal.remove();
          }
        });
        
        // –£–¥–∞–ª—è–µ–º overlay —ç–ª–µ–º–µ–Ω—Ç—ã
        const overlays = document.querySelectorAll('[class*="overlay"], [class*="backdrop"]');
        overlays.forEach(overlay => {
          if (overlay instanceof HTMLElement) {
            overlay.style.display = 'none';
            overlay.remove();
          }
        });
      });

      // –ò—â–µ–º –±–ª–æ–∫ —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏
      const giftsContainer = await page.$('div.grid.gap-2.md\\:gap-3.grid-cols-3.sm\\:grid-cols-4.md\\:grid-cols-5.lg\\:grid-cols-6.mb-5');
      
      if (!giftsContainer) {
        console.log('  ‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return undefined;
      }

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤
      const giftCards = await giftsContainer.$$('div > div');
      
      if (giftCards.length === 0) {
        console.log('  ‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return undefined;
      }

      // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ä—Ç–æ—á–∫—É
      const lastGiftCard = giftCards[giftCards.length - 1];
      
      // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥–∞—Ä–æ–∫ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∫–ª–∏–∫–æ–º
      console.log('  üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥–∞—Ä–æ–∫...');
      
      try {
        // –ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫
        await lastGiftCard.click({ timeout: 5000 });
      } catch (clickError) {
        console.log('  ‚ö†Ô∏è –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π...');
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–∫ —á–µ—Ä–µ–∑ JavaScript
        await page.evaluate((element) => {
          if (element && element instanceof HTMLElement) {
            element.click();
          }
        }, lastGiftCard);
      }
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–∞—Ä–∫–∞
      await page.waitForTimeout(3000);
      
      // –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Telegram
      const telegramLink = await page.$('a[href*="t.me/nft/"]');
      
      if (telegramLink) {
        const href = await telegramLink.getAttribute('href');
        if (href) {
          console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫: ${href}`);
          return href;
        }
      }

      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∏—â–µ–º –≤ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const currentUrl = page.url();
      const urlMatch = currentUrl.match(/\/gifts\/([^\/]+)/);
      if (urlMatch) {
        const giftId = urlMatch[1];
        const telegramUrl = `https://t.me/nft/${giftId}`;
        console.log(`  ‚úÖ –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ URL: ${telegramUrl}`);
        return telegramUrl;
      }

      console.log('  ‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return undefined;

    } catch (error) {
      console.log(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫: ${error}`);
      return undefined;
    }
  }

  private async closeSubscriptionModal(page: Page): Promise<void> {
    try {
      // –ò—â–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥–ø–∏—Å–∫–∏
      const modal = await page.$('#subscribe-modal-portal');
      if (modal) {
        console.log('  üö´ –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥–ø–∏—Å–∫–∏...');
        
        // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeSelectors = [
          'button[aria-label="Close"]',
          'button[aria-label="close"]', 
          'button:has-text("√ó")',
          'button:has-text("‚úï")',
          'button[class*="close"]',
          'button[class*="Close"]',
          '[data-testid="close"]',
          '.close-button',
          'button[type="button"]:has(svg)'
        ];
        
        let closed = false;
        for (const selector of closeSelectors) {
          try {
            const closeButton = await page.$(selector);
            if (closeButton) {
              await closeButton.click();
              await page.waitForTimeout(1000);
              closed = true;
              break;
            }
          } catch (e) {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º
          }
        }
        
        // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º Escape
        if (!closed) {
          await page.keyboard.press('Escape');
          await page.waitForTimeout(1000);
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ JavaScript
        await page.evaluate(() => {
          const modal = document.getElementById('subscribe-modal-portal');
          if (modal) {
            modal.style.display = 'none';
            modal.remove();
          }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã–ª–æ—Å—å
        const isModalVisible = await page.$('#subscribe-modal-portal');
        if (!isModalVisible) {
          console.log('  ‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
        } else {
          console.log('  ‚ö†Ô∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Å–µ –µ—â–µ –≤–∏–¥–∏–º–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
        }
      }
    } catch (error) {
      console.log('  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ:', error);
    }
  }
}
